<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Reputable Journal - Python</title><link href="https://bnmnetp.github.io/PelicanBlog/" rel="alternate"></link><link href="https://bnmnetp.github.io/PelicanBlog/feeds/python.atom.xml" rel="self"></link><id>https://bnmnetp.github.io/PelicanBlog/</id><updated>2015-05-24T00:00:00-05:00</updated><entry><title>adventures with flask-cors</title><link href="https://bnmnetp.github.io/PelicanBlog/adventures-with-flask-cors.html" rel="alternate"></link><published>2015-05-24T00:00:00-05:00</published><updated>2015-05-24T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2015-05-24:/PelicanBlog/adventures-with-flask-cors.html</id><summary type="html">&lt;p&gt;As I am working through the new architecture for the &lt;a href="http://github.com/bnmnetp/runestone/wiki/DevelopmentRoadmap"&gt;Runestone Interactive server&lt;/a&gt; I wanted to make sure that I had my authentication model working right from the beginning. The goals for the architecture are as follows:
*  I want people to be able to write and host the static parts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I am working through the new architecture for the &lt;a href="http://github.com/bnmnetp/runestone/wiki/DevelopmentRoadmap"&gt;Runestone Interactive server&lt;/a&gt; I wanted to make sure that I had my authentication model working right from the beginning. The goals for the architecture are as follows:
*  I want people to be able to write and host the static parts of any book on any server.  You can think of each page in a book as its own single page application.
* I want to provide back-end services so that students using any book hosted anywhere can save their programs and answers to quizzes etc.
* I want to continue to gather research data on how students learn computer science.
* I want to make the registration and login process as easy as possible.
Since the static parts can be hosted anywhere (including a site like &lt;a href="interactivepython.org"&gt;interactivepython.org&lt;/a&gt;)  The interactive parts are going to involve making cross-domain XMLHttpRequests (xhr).  Of course the first thing that happens when you have a page hosted on &lt;code&gt;static-site&lt;/code&gt; that makes an xhr request to &lt;code&gt;ajax-server&lt;/code&gt; is that you get an error.   Browsers and sites work together to disallow cross-domain requests to prevent a variety of nasty behaviors.  But, there are many times (wlike now) when you have a legitimate reason for doing this.  So, the w3c created the Cross Origin Resource Sharing (CORS) standard to help developers get around this.  Cory Dolphin has created an excellent plugin for &lt;a href="flask.pocoo.org"&gt;Flask&lt;/a&gt; developers called &lt;a href="http://github.com/corydolphin/flask-cors"&gt;Flask-CORS&lt;/a&gt;.  The plugin is a great example of the brilliant design behind Flask and in fact the entire WSGI stack.&lt;/p&gt;
&lt;h2&gt;The Really Simple Approach&lt;/h2&gt;
&lt;p&gt;The first thing you find when you start googling about this problem is that there is a seemingly simple solution.  If you have control over your AJAX response you simply need to add an HTTP header &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;  problem solved.  Now everyone in the world can make xhr requests to your server and use the results in their page.&lt;/p&gt;
&lt;p&gt;Adding a header is pretty simple in Flask.  All you need to do is use &lt;code&gt;response.headers.add("Access-Control-Allow-Origin", "*"&lt;/code&gt;   Problem solved, moving right along to the next programming challenge.&lt;/p&gt;
&lt;p&gt;Or maybe not.   Minutes later you realize that this is not all that great because you have decorated some of your requests to require a login.  That wont be a problem if the static page is served from the same domain because you will automatically get the session cookie, and the Flask-Security extension will eat that cooking and validate things for you.  BUT if your static page is not served from the same domain you will not even get the session cookie.  Oh Bother.  But you also have a second problem.  You have probably violated the CORS specification without even meaning to.  Really, if I had to read the spec for every web standard I wanted to use I would seriously think about changing careers.  But, &lt;strong&gt;here is the important part&lt;/strong&gt; you may not return a CORS header unless the request contains an origin header!  Chances are you tested you change with a quick &lt;code&gt;curl&lt;/code&gt; call to your endpoint, saw the Access-Control header and were happy.  But you sure didn’t give it an origin header on the request when you did that.  So to summarize, we have two problems we need to solve:
1.  We want to incorporate authentication into our cross origin strategy.
2.  We want to be good citizens and follow the spec.&lt;/p&gt;
&lt;h2&gt;The Smart Approach&lt;/h2&gt;
&lt;p&gt;The smart approach is to use a nice extension where &lt;em&gt;other&lt;/em&gt; people have figured this out, and presumably followed the specification. Enter Flask-CORS.  You can enable CORS support with a simple decorator &lt;code&gt;@cross_origin&lt;/code&gt;  This will automatically add the  &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt; to responses.  &lt;strong&gt;As long as your test request includes an Origin&lt;/strong&gt;.  If you are like me you will forget that part, and then wonder why the extension must not be working.  So this solves problem 2.&lt;/p&gt;
&lt;p&gt;To solve problem 1 here is a snippet of code that works just fine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@ajax.route(&amp;#39;/ajax/page&amp;#39;)
@login_required
@cross_origin(supports_credentials=True)
def test():
    return jsonify({&amp;#39;foo&amp;#39;:&amp;#39;bar&amp;#39;})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above responds to the url &lt;code&gt;/ajax/page&lt;/code&gt;  I have all of my API calls in an &lt;code&gt;ajax&lt;/code&gt; blueprint with ajax as part of the url.  I’m requiring that the user is logged in before I allow them to access this endpoint.  I also want it to be allowed cross origin.  This is where the parameter to the &lt;code&gt;@cross_origin&lt;/code&gt; comes into play.  Supports credentials sets up the CORS response to return an additional CORS header:  &lt;code&gt;Access-Control-Allow-Credentials:  "true"&lt;/code&gt;.  For one final twist, you need to know that when you have &lt;code&gt;supports_credentials=True&lt;/code&gt; you may NOT set &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;  You need to be specific and set the origin to the origin that comes in the request headers.  To Make this work and try it out from the client side, here is a bit of HTML/Javascript.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;corsTest();&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;TestCORS&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    function corsTest() {
        var xhr = new XMLHttpRequest();
        xhr.withCredentials = true;
        xhr.onload = function () {
            alert(xhr.responseText);
        }
        xhr.onerror = function () {
            alert(&amp;quot;error&amp;quot;);
        }

        xhr.open(&amp;quot;GET&amp;quot;, &amp;quot;http://example.com/ajax/page&amp;quot;, true)
        xhr.send()
    }
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that you need to set &lt;code&gt;xhr.withCredentials&lt;/code&gt; in order for your session cookie to be sent along.  By default cookies are NOT sent with cross origin requests.&lt;/p&gt;
&lt;p&gt;Now, I may end up adding more to this as I discover the intricacies of so called “Non-Simple” requests.  That is requests beyond simple GET and POST, as I work on moving my API toward a RESTful API which uses PUT and others.  This will nodoubt enlighten me about preflighted requests.  Which I can only assume means something different than sitting around in an airport bar waiting for your flight to be called.&lt;/p&gt;
&lt;p&gt;There is a lot more detail and background on using CORS at the following two sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"&gt;The Mozilla Developer Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flask-cors.readthedocs.org"&gt;Flask-CORS documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="python"></category><category term="runestone"></category></entry><entry><title>writing a runestone lab the easy way</title><link href="https://bnmnetp.github.io/PelicanBlog/how-to-make-a-lab-in-three-easy-steps.html" rel="alternate"></link><published>2015-05-06T00:00:00-05:00</published><updated>2015-05-06T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2015-05-06:/PelicanBlog/how-to-make-a-lab-in-three-easy-steps.html</id><summary type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;As part of the grand reorganization of the various tools and software associated with the &lt;a href="http://runestoneinteractive.org"&gt;Runestone Interactive&lt;/a&gt; project I am planning to also write a series of tutorials to help people get started.  The major aspects of this reorganization are discussed in detail in the &lt;a href="https://github.com/bnmnetp/runestone/wiki/DevelopmentRoadmap"&gt;Project Roadmap&lt;/a&gt;, but for …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;As part of the grand reorganization of the various tools and software associated with the &lt;a href="http://runestoneinteractive.org"&gt;Runestone Interactive&lt;/a&gt; project I am planning to also write a series of tutorials to help people get started.  The major aspects of this reorganization are discussed in detail in the &lt;a href="https://github.com/bnmnetp/runestone/wiki/DevelopmentRoadmap"&gt;Project Roadmap&lt;/a&gt;, but for the sake of some context I can summarize the major efforts as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Separate the distribution and development of writing tools from the server.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a pip installable runestone package.&lt;/li&gt;
&lt;li&gt;Remove the interconnectedness between the components and Sphinx.  In other words support the user of runestone tools in environments like Markdown, and even wysiwyg html editors.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-architect the server side focusing on services for the writing tools&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an authentication service that supports CORS for cross domain AJAX use.&lt;/li&gt;
&lt;li&gt;Create a standard REST API for logging and storing student data&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a web application (or integrate with another) for grading&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I just completed Part 1.1 I thought it was a good time to talk about how easy it is for you to now use the runestone tools for creating a lab for your students, or lecture notes and presentation materials for your class.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The major steps in getting started are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installing Python&lt;/li&gt;
&lt;li&gt;Installing the runestone tools&lt;/li&gt;
&lt;li&gt;Building your first lab&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install Python&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;If you are on a Mac you are already done with this step.&lt;/li&gt;
&lt;li&gt;If you are on Windows you will need to go to &lt;a href="http://python.org"&gt;Python.org&lt;/a&gt; and download Python3.x.   The windows installer is a typical installer and you can just click your way through it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are an advanced Python user you may want to may want to create a &lt;code&gt;virtualenvironment&lt;/code&gt; for this project but it is not a requirement.&lt;/p&gt;
&lt;p&gt;If you are on Windows you may want to edit your PATH environment variable following the instructions &lt;a href="https://docs.python.org/3.4/using/windows.html"&gt;here&lt;/a&gt;.  Again, mac users can ignore this.&lt;/p&gt;
&lt;h3&gt;Installing the Runestone Components&lt;/h3&gt;
&lt;p&gt;You are going to need to use the command line for the rest of this tutorial, so start up a &lt;a href="http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line"&gt;Terminal&lt;/a&gt;   (/Applications/Utilities on a Mac  or run &lt;a href="http://www.tomshardware.co.uk/faq/id-1656450/windows-powershell-feature.html"&gt;PowerShell&lt;/a&gt; or cmd.exe on Windows)  I will repeat myself here.  These commands need to be run from the command line, &lt;strong&gt;not&lt;/strong&gt; from the Python shell.&lt;/p&gt;
&lt;p&gt;Run the &lt;code&gt;pip&lt;/code&gt; command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install runestone
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or on Windows if you have not modified  your PATH try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\\Python34\Scripts\pip.exe install runestone
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From now on I'm only going to give the Mac way of running the commands.  If you are on windows you will need to add &lt;code&gt;C:\\Python34\Scripts&lt;/code&gt; to the beginning of the command and add &lt;code&gt;.exe&lt;/code&gt; to the end.&lt;/p&gt;
&lt;p&gt;You can watch as a lot of text goes scrolling by.  But as long as you don't get any errors you should be good to go.  You only need to do these first two steps once.  Once you have installed Python and runestone you will not have to do it again.&lt;/p&gt;
&lt;h3&gt;Starting your first Runestone Project&lt;/h3&gt;
&lt;p&gt;Here is a session of me on my computer creating a simple project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;mynewproject&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;mynewproject&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;runestone&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runestone&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;gather&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;few&lt;/span&gt; &lt;span class="n"&gt;pieces&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;myhello&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;  &lt;span class="p"&gt;[.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ajax&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:8000]:&lt;/span&gt;
&lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bmiller&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Brad&lt;/span&gt; &lt;span class="n"&gt;Miller&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Runestone&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="n"&gt;Log&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;runestone&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you will have the following files and folders:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mynewproject/
        _static/
        _sources    
        _templates  
        conf.py
        pavement.py
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;_static&lt;/code&gt; folder is for things like images or javscript files.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_sources&lt;/code&gt; folder is where you will put your own writing.  To start with there are a couple of examples files for you.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_templates&lt;/code&gt; folder is for styling.  There is a default set of templates that match the runestone interactive look and feel.  That is a good thing to start with.  Once you become more familiar with the system you may want to customize the templates or even make your own.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;conf.py&lt;/code&gt; file is used by Sphinx, and contains information from some of the questions you answered when you initialized your project.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;pavement.py&lt;/code&gt; file is used for building and setting build parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these files are important, and you should not delete any of them.&lt;/p&gt;
&lt;p&gt;Next run &lt;code&gt;runestone build&lt;/code&gt;  This command will create a build/mynewproject folder with an index.html file in it.  If you want you can now run &lt;code&gt;runestone serve&lt;/code&gt; and then go to your browser and open up the following URL  &lt;code&gt;http://localhost:8000/index.html&lt;/code&gt;   Yay!  You have a webpage.  Feel free to explore a bit to get an idea about some of the components you can use in your lab.&lt;/p&gt;
&lt;h3&gt;Writing your Own Lab&lt;/h3&gt;
&lt;p&gt;OK, lets edit  &lt;code&gt;_sources/index.rst&lt;/code&gt;   Initially it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=====================
This Is A New Project
=====================


SECTION 1: Introduction
:::::::::::::::::::::::

Congratulations!   If you can see this file you have probably successfully run the ``runestone init`` command.  If you are looking at this as a source file you should now run ``runestone build``  to generate html files.   Once you have run the build command you can run ``runestone serve`` and then view this in your browser at ``http://localhost:8000``

This is just a sample of what you can do.  The index.rst file is the table of contents for your entire project.  You can put all of your writing in the index, or as you will see in the following section you can include additional rst files.  those files may even be in subdirectories that you can reference using a relative path.

The overview section, which follows is an ideal section to look at both online and at the source.  It is pretty easy to see how to write using any of the interactive features just by looking at the examples in ``overview.rst``


SECTION 2: An Overview of the extensions
::::::::::::::::::::::::::::::::::::::::

.. toctree::
   :maxdepth: 2

   overview.rst


SECTION 2: Add more stuff here
::::::::::::::::::::::::::::::

You can add more stuff here.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are not familiar with markup languages, this file should still be quite readable to you, and you can probably easily guess what most things do.  Runestone uses a markup language called restructuredText.  There is a very nice, short tutorial &lt;a href="http://getnikola.com/quickstart.html"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To give you an idea of what you see in the example above,  the section that starts with &lt;code&gt;.. toctree::&lt;/code&gt; is called a directive and it creates a table of contents for you.  the &lt;code&gt;maxdepth&lt;/code&gt; part sets the table of contents to show sections and subsections.  And the line with &lt;code&gt;overview.rst&lt;/code&gt; indicates that it is a file that should be included in the overall  web page.  More on all of this later. Our first task is simply going to be to wipe everything out, and start over.   Using a plain text editor change index.rst to look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;=============&lt;/span&gt;
&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Sample&lt;/span&gt; &lt;span class="n"&gt;Lab&lt;/span&gt;
&lt;span class="o"&gt;=============&lt;/span&gt;

&lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Turtle&lt;/span&gt; &lt;span class="n"&gt;Graphics&lt;/span&gt;
&lt;span class="o"&gt;=======================&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;

&lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;activecode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;turtle1&lt;/span&gt;

   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;turtle&lt;/span&gt;

   &lt;span class="n"&gt;timmy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Turtle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;timmy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;timmy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Can&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;timmy&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;octagon&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now save the file and rerun the &lt;code&gt;runestone build&lt;/code&gt; command.  Everything should build without a problem and you can now run &lt;code&gt;runestone serve&lt;/code&gt; and open up &lt;code&gt;http://localhost:8000&lt;/code&gt; from your browser.  Notice that you can change the program and rerun it right from your browser. &lt;/p&gt;
&lt;p&gt;It is probably obvious that you can create headings and subheadings.  Unordered lists are created using &lt;code&gt;*&lt;/code&gt; and the runnable code examples are created by the &lt;code&gt;.. activecode::&lt;/code&gt;  directive. The name turtle1 must be unique on the webpage, other than that it is not used for too much at this point.  The rest of the activecode directive contains plain old python code, but it must be indented to line up with the &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;activecode.&lt;/code&gt;  All indented lines are included as the body of the activecode directive, regular text processing starts at the first unindented line.&lt;/p&gt;
&lt;p&gt;There you have it.  You have created a very nice little lesson without a lot of hassle.  The Runestone and Sphinx tools take care of all of the formatting for you!&lt;/p&gt;
&lt;h2&gt;Giving Students Browser Access to the Lab&lt;/h2&gt;
&lt;p&gt;If you have your own webpage hosted on a school server that you normally use for class you can make your Lab available to the students by simply taking the folder &lt;code&gt;mynewproject&lt;/code&gt; inside the &lt;code&gt;build&lt;/code&gt; folder and putting that on your website.  The folder is self contained and can be hosted on any web server.  &lt;/p&gt;
&lt;p&gt;If you know the IP Address of your own computer and you simply want to give let students bring up the webpage from your computer you can do that too.  For example, lets suppose you know that your IP address is &lt;code&gt;10.0.0.23&lt;/code&gt;  Your students can get everything they need from &lt;code&gt;http://10.0.0.23:8000/index.html&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Coming Soon&lt;/h3&gt;
&lt;p&gt;There are many free web hosting solutions out there and you can also choose one of them and upload your project folder for hosting there.  I'll cover at least one of them in another tutorial.  In fact I think I see a whole series of tutorials in the future on topics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Making an online quiz for class&lt;/li&gt;
&lt;li&gt;Making a lecture or presentation &lt;/li&gt;
&lt;li&gt;Hosting your lab or quiz on &lt;strong&gt;github pages&lt;/strong&gt; or another online service&lt;/li&gt;
&lt;li&gt;Using your lab with runestone services&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="python"></category><category term="runestone"></category><category term="tutorial"></category></entry><entry><title>PyCon 2014 Keynote Shout Out</title><link href="https://bnmnetp.github.io/PelicanBlog/pycon-2014-keynote-shout-out.html" rel="alternate"></link><published>2014-04-30T14:20:59+00:00</published><updated>2014-04-30T14:20:59+00:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2014-04-30:/PelicanBlog/pycon-2014-keynote-shout-out.html</id><summary type="html">&lt;p&gt;I am going to have to go to PyCon.  Not next year, as I'm going to be in Malta at the time, but hopefully in 2016.  I don't know how many people attend, but the number is big, and they have sold old every year for the past three years …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am going to have to go to PyCon.  Not next year, as I'm going to be in Malta at the time, but hopefully in 2016.  I don't know how many people attend, but the number is big, and they have sold old every year for the past three years.&lt;/p&gt;
&lt;p&gt;I just got done watching one of the Keynote presentations online from PyCon 2014 held in Montreal April 9-17.  I'm linking to it below, because it goes right to the heart of most of my academic work.  But, it was especially exciting at the 20:05 mark.  Where she highlights &lt;a href="http://interactivepython.org"&gt;interactivepython.org&lt;/a&gt; and the &lt;a href="http://skulpt.org"&gt;Skulpt&lt;/a&gt; projects!&lt;/p&gt;
&lt;div class="youtube youtube-16x9"&gt;&lt;iframe src="https://www.youtube.com/embed/4QOoAw6Su7M" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>easy publishing with runestone interactive</title><link href="https://bnmnetp.github.io/PelicanBlog/easy-publishing-with-runestone-interactive.html" rel="alternate"></link><published>2014-03-05T08:19:04-06:00</published><updated>2014-03-05T08:19:04-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2014-03-05:/PelicanBlog/easy-publishing-with-runestone-interactive.html</id><summary type="html">&lt;p&gt;During my January travels, I also converted this blog from tubmlr, which had been frustrating me for a while, to Octopress, with which I have been very happy.  Nothing like hacker level control of your own blog.  But more, than just the switch in tools, the move to Octopress inspired …&lt;/p&gt;</summary><content type="html">&lt;p&gt;During my January travels, I also converted this blog from tubmlr, which had been frustrating me for a while, to Octopress, with which I have been very happy.  Nothing like hacker level control of your own blog.  But more, than just the switch in tools, the move to Octopress inspired me to make it easier for people to publish small or large works using the Runestone tools.&lt;/p&gt;
&lt;p&gt;Yesterday, at the Learning @ Scale conference we demoed this new capability.  See &lt;a href="&amp;lt;http://runestoneinteractive.org/LearningAtScale"&gt;the demo here&lt;/a&gt;.  To make it super easy to publish:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lecture slides&lt;/li&gt;
&lt;li&gt;Demonstrations&lt;/li&gt;
&lt;li&gt;A Tutorial&lt;/li&gt;
&lt;li&gt;Lab Instructions&lt;/li&gt;
&lt;li&gt;In class exercises&lt;/li&gt;
&lt;li&gt;A short module on your favorite topic not covered elsewhere&lt;/li&gt;
&lt;li&gt;An entire book&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3&gt;Building&lt;/h3&gt;
&lt;p&gt;You can simply follow the instructions at this new repository:  &lt;a href="http://github.com/RunestoneInteractive/RunestoneTools"&gt;github.com/RunestoneInteractive/RunestoneTools&lt;/a&gt;.  In a nutshell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Sphinx, paver, and paverutils using pip.&lt;/li&gt;
&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;li&gt;Edit the index.rst file in source, and add any additional rst files you may want, depending on how complex your project is.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;paver build&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Deploying&lt;/h3&gt;
&lt;p&gt;Now you have a choice.  In the build directory you have a nice self contained set of html files, these files are set up to make use of the runestone server invisibly in the background.  The static html can be served from any web server.  Just drop in the build directory and you are ready to serve.  OR, you can now host and deploy your project using &lt;strong&gt;GitHub Pages&lt;/strong&gt;.  To host on github pages you need to do three things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an empty repository in your github account.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;paver setup_github_pages&lt;/code&gt; and paste in the URL of the new account.&lt;/li&gt;
&lt;li&gt;run paver deploy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now your pages will be available at:  http://youraccount.github.io/YourRepo
If you want to host these pages behind a custom domain name, you can follow the instructions on github for doing so.  Hint:  Its really easy.&lt;/p&gt;
&lt;p&gt;I hope this new capability will inspire lots of people to give these tools a try.  I also hope that we can build a repository of resources built with the tools, so that we can all share our teaching ideas.  Stay tuned for more on that.&lt;/p&gt;
&lt;h3&gt;Caveats&lt;/h3&gt;
&lt;p&gt;All of the features, activecode, codelens, assessment questions, parson's problems, &lt;a href="http://interactivepython.org/overview/overview.html"&gt;and more&lt;/a&gt; work just fine.  The major thing that will not work (yet!) is the login/logout.  I need to rework our authentication system in order for this to work.  This will for sure need to happen before the end of summer.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="runestone"></category></entry><entry><title>runestone interactive announces new editions of interactive textbooks</title><link href="https://bnmnetp.github.io/PelicanBlog/runestone-interactive-announces-new-editions-of-interactive-textbooks.html" rel="alternate"></link><published>2013-08-14T00:00:00-05:00</published><updated>2013-08-14T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2013-08-14:/PelicanBlog/runestone-interactive-announces-new-editions-of-interactive-textbooks.html</id><summary type="html">&lt;p&gt;Today I'm really pleased to announce that  have launched version 2.0 of our interactive computer science  textbooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://interactivepython.org/runestone/static/thinkcspy/index.html"&gt;How to Think Like a Computer Scientist:  Interactive Edition 2.0&lt;/a&gt;  (CS 1)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://interactivepython.org/runestone/static/pythonds/index.html"&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;  (CS 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We first launched these books on our &lt;a href="http://interactivepython.org"&gt;interactivepython …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I'm really pleased to announce that  have launched version 2.0 of our interactive computer science  textbooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://interactivepython.org/runestone/static/thinkcspy/index.html"&gt;How to Think Like a Computer Scientist:  Interactive Edition 2.0&lt;/a&gt;  (CS 1)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://interactivepython.org/runestone/static/pythonds/index.html"&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;  (CS 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We first launched these books on our &lt;a href="http://interactivepython.org"&gt;interactivepython.org&lt;/a&gt; website in May of 2012, after around a year of private testing in the classroom.  Since then we have had 1.3 million page views by a quarter of a million unique visitors.  Daily, we get around 2,000 unique visitors.  Not bad for a site with zero dollars for an advertising budget.&lt;/p&gt;

&lt;h2&gt;What Makes these Books Unique?&lt;/h2&gt;

&lt;p&gt;These books are unique because they are interactive.  We have developed a set of authoring tools that make it really easy to write an interactive textbook with many interactive features.  We call these the Runestone tools.  Some of the interactive features that are possible include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Activecode&lt;/strong&gt;:  Using a &lt;a href="http://skulpt.org"&gt;Javascript implementation&lt;/a&gt; of Python you can run and modify the examples in the textbook right in the book.  No server connection is required since it is based on javascript and runs right in the browser.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Codelens&lt;/strong&gt;:  Using the amazing power of the &lt;a href="http://www.pythontutor.com"&gt;pythontutor.com&lt;/a&gt;  tools you can step through examples one line at a time, forward and backward.  While you are stepping through the code you can see variables and other data structures change values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parsons Problems: &lt;/strong&gt; For beginning programmers Parson's problems are like refrigerator magnet poetry.  You can provide your students with the statements needed to write a program, but they must put the statements in the correct order.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inline Quizzes: &lt;/strong&gt;Each section of the book contains some inline quizzes that allow students to check their understanding of the material.  The quizzes have different feedback for each correct or incorrect answer that try to point students in the right direction. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Online Homework:&lt;/strong&gt;   At the end of each chapter are programming assignments.  In this new edition we have provided the answers to the odd numbered questions, and discussion forums for students to exchange ideas or ask questions about the homework problems.  As an instructor, you can grade your students programs on one convenient page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Highlighting&lt;/strong&gt;  This is another much requested new feature.  Students can highlight text using the mouse and the highlights magically reappear on any supported browser.  In addition we will remember the students last location in the book and offer to return them to that position when they return.&lt;/li&gt;
&lt;li&gt;There are many other features but the best way to understand what we are doing is to actually have a look at our &lt;a href="http://interactivepython.org/runestone/static/overview/overview.html"&gt;overview page&lt;/a&gt;, which shows everything I have mentioned here and a lot more in action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over this past year we have discovered that we serve two different audiences with these books.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instructors looking for a textbook to use in their own course&lt;/li&gt;
&lt;li&gt;People who are interested in teaching themselves some computer science and have found our books through google search, the Python wiki, or some other word of mouth source.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Textbooks as a Service&lt;/h2&gt;

&lt;p&gt;When we launched the site last year we decided to not only provide the books free and open for anyone who wanted to read them, but also as a service for instructors who wanted to have their own custom copy of the book where they could track their students progress, review their answers to quizzes, and grade their students homework.   If you want to use our books in your class you are welcome to do so.  You have two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can use a copy of either book as is with the order of the chapters just as they are on the books linked to above.&lt;/li&gt;
&lt;li&gt;You can try our custom interface where you can mix and match chapters from both books to create your own custom textbook.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have created your own course then you will be able to see the assignments your students have completed right in the textbook.  I find this to be very valuable as an instructor.  For example if I have assigned the students to read and do the quizzes for a particular section, I can simply go to the quiz question and click on the 'Compare Me' button.  As an instructor I will see a summary of the answers my students gave, as well as the details of the answers that each student tried.&lt;/p&gt;

&lt;h2&gt;Supporting the Independent Learner&lt;/h2&gt;

&lt;p&gt;Perhaps the biggest surprise of this project is the number of people that have found one of the books through google, and are simply teaching themselves to program.  We are hopeful that some of the new features we have added will help foster a  community of learners so that people just learning to program can talk to others in the same situation.  Some things we hope are particularly helpful include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Answers to odd numbered questions&lt;/strong&gt;.  This was probably the number one request I got through email all last year.  How do I know if I did it right?  We decided to risk it and provide the answers, but only to the odd numbered problems.  In addition a student must try to answer the problem at least once before the answer becomes "unlocked"&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discussion threads&lt;/strong&gt; for homework problems.  Again this may seem like a risky move where students can just publish their answer and others can copy.  But, what we are hoping for is that students will see that there are many ways to get to the "right answer"  There are different approaches and programming styles that can be used to solve the same problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compare Me&lt;/strong&gt;  Although we aren't sure about the title on the button, the idea is that after answering one of the quiz questions a learner can check on their overall 'grade' for all quiz questions, and see how their answer compared to all the other learners.  We haven't gone so far as to give out badges, but we think this is a nice intermediate approach.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Runestone Tools&lt;/h2&gt;

&lt;p&gt;The books above were built using our &lt;a href="http://runestoneinteractive.org"&gt;Runestone Interactive&lt;/a&gt; toolkit.  These tools are freely available on &lt;a href="http://github.com/bnmnetp/runestone"&gt;github&lt;/a&gt;.  If you want to write your own interactive book, or even just use the tools to create some interactive labs for your students you are welcome to do so.  You can write your materials in an easy to use markup language called restructuredText and add examples or quizzes using very simple tags.  Complete documentation for our extensions to restructuredText is provided on the website.  In addition to our own books, the team at Harvey Mudd College has published &lt;a href="http://www.cs.hmc.edu/csforall"&gt;CS for All&lt;/a&gt;  another introductory textbook using our tools.  I know of at least two other books in progress!  &lt;/p&gt;

&lt;p&gt;If you are interested in following our development or getting involved You can do so in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter, follow &lt;a href="http://twitter.com/iRunestone"&gt;iRunestone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Facebook, &lt;a href="https://www.facebook.com/RunestoneInteractive"&gt;facebook.com/RunestoneInteractive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google &lt;a href="https://groups.google.com/forum/#!forum/runestoneinteractive"&gt;Groups&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I am grateful to the many people who have provided us with feedback over the last year.  And I am especially grateful to the ACM SIGCSE social projects committee for providing me with a special projects grant that allowed me to work with a student (Isaac Dontje Lindell) this summer.  He did a ton of work and will be graduating next year.  You should hire him.  In addition this project relies on many open source components which I will mention and link to below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The original text for&lt;em&gt; How to Think Like a Computer Scientist&lt;/em&gt; comes from Allen Downey, Jeff Elkner and Chris Meyers.  We have modified it a lot, but without a starting point for us to experiment with our interactive ideas this project never would have taken off.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Problem Solving with Algorithms and Data Structures&lt;/em&gt; text is published as a paper textbook by Franklin Beedle and Associates.  Without the forward thinking of Jim Leisy this book would be stuck.  Thankfully Jim freed us to use the text in an interactive form online.&lt;/li&gt;
&lt;li&gt;Mark Guzdial, Barbara Ericson and the rest of the &lt;a href="http://home.cc.gatech.edu/csl/CSLearning4U"&gt;CSLearning4U&lt;/a&gt; research group at Georgia Tech have provided questions, assessments,  and many other features and ideas.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Activecode&lt;/strong&gt; examples are made possible by &lt;a href="http://skulpt.org"&gt;skulpt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Codelens&lt;/strong&gt; examples are made possible by Philip Guo and his &lt;a href="http://www.pythontutor.com"&gt;pythontutor.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The look and feel of the book is based on the &lt;a href="http://getbootstrap.com/"&gt;bootstrap&lt;/a&gt; templates&lt;/li&gt;
&lt;li&gt;The system that builds the website from source is called &lt;a href="http://sphinx-doc.org"&gt;Sphinx&lt;/a&gt; and is really the backbone of the system that allows us to write our interactive extensions.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vkaravir"&gt;Ville Karavirta&lt;/a&gt; wrote the original js-parsons library and Mike Hewner integrated it into the Runestone Tools.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>making python3 my default</title><link href="https://bnmnetp.github.io/PelicanBlog/making-python3-my-default.html" rel="alternate"></link><published>2013-04-15T00:00:00-05:00</published><updated>2013-04-15T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2013-04-15:/PelicanBlog/making-python3-my-default.html</id><summary type="html">&lt;p&gt;I'm finally there.  After a long time of writing books using Python 3, and teaching in Python 3 on a daily basis, I'm finally at the point where I'm changing my work environment to use Python 3 by default.&lt;/p&gt;

&lt;p&gt;Here are the signs that convinced me it was time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I'm finally there.  After a long time of writing books using Python 3, and teaching in Python 3 on a daily basis, I'm finally at the point where I'm changing my work environment to use Python 3 by default.&lt;/p&gt;

&lt;p&gt;Here are the signs that convinced me it was time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The release of Pillow to provide PIL functionality!&lt;/li&gt;
&lt;li&gt;Django 1.5&lt;/li&gt;
&lt;li&gt;IPython and IPython notebook are fully supported  -- I Love IPython Notebook&lt;/li&gt;
&lt;li&gt;matplotlib !!&lt;/li&gt;
&lt;li&gt;Sphinx, Jinja, SQLAlchemy, and many others are supported.  See: &lt;a href="https://python3wos.appspot.com/"&gt;https://python3wos.appspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of projects that I use a lot that are not yet on Python3 (web2py) but I'm not going to let that stop me.&lt;/p&gt;

&lt;p&gt;It turns out to be pretty easy to get yourself up and running on all of this stuff with Python 3.  I'm on a Mac running 10.8.3.  The first and most important step is to get a working version of pip for Python3.  First you need to install distribute.&lt;/p&gt;

&lt;pre&gt;&lt;code class="plain plain" style="background-image: none !important; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; font-size: 13px; direction: ltr !important; display: inline !important; color: black !important;"&gt;curl -O &lt;a style="background-image: none !important; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; color: black !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; font-size: 1em !important; direction: ltr !important;" href="http://python-distribute.org/distribute_setup.py"&gt;http://python-distribute.org/distribute_setup.py&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="plain plain" style="background-image: none !important; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; font-size: 13px; direction: ltr !important; display: inline !important; color: black !important;"&gt;&lt;/code&gt;&lt;span style="font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; line-height: 1.1em; background-color: white; text-align: left; white-space: pre;"&gt;sudo python3 distribute_setup.py&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;This will install easy_install in your Python home, but go one more step and install pip.&lt;/p&gt;

&lt;pre&gt;&lt;code class="plain plain" style="background-image: none !important; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; font-size: 13px; direction: ltr !important; display: inline !important; color: black !important;"&gt;curl -O &lt;a style="background-image: none !important; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; color: black !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; font-size: 1em !important; direction: ltr !important;" href="https://raw.github.com/pypa/pip/master/contrib/get-pip.py"&gt;https://raw.github.com/pypa/pip/master/contrib/get-pip.py&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="plain plain" style="background-image: none !important; border: 0px !important; margin: 0px !important; padding: 0px !important; vertical-align: baseline !important; font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace !important; border-top-left-radius: 0px !important; border-top-right-radius: 0px !important; border-bottom-right-radius: 0px !important; border-bottom-left-radius: 0px !important; bottom: auto !important; float: none !important; height: auto !important; left: auto !important; line-height: 1.1em !important; outline: 0px !important; overflow: visible !important; position: static !important; right: auto !important; top: auto !important; width: auto !important; box-sizing: content-box !important; font-size: 13px; direction: ltr !important; display: inline !important; color: black !important;"&gt;&lt;/code&gt;&lt;span style="font-family: Consolas, 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace; font-size: 13px; line-height: 1.1em; background-color: white; text-align: left; white-space: pre;"&gt;sudo python3 get-pip.py&lt;/span&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;

&lt;p&gt;This will create a pip in your /Library/Frameworks/Python.framework/Versions/3.3/bin  directory.&lt;/p&gt;

&lt;p&gt;From there you can begin pip installing pretty much everything you need!&lt;/p&gt;

&lt;p&gt;From my history today as I was setting everything up:&lt;/p&gt;

&lt;pre&gt;10393* pip3 install ipython&lt;br /&gt;10409* pip3 install numpy&lt;br /&gt;10410* pip3 install matplotlib&lt;br /&gt;10429* pip3 install tornado&lt;br /&gt;10430* pip3 install pyzmq&lt;/pre&gt;

&lt;pre&gt;10455  pip3 install Sphinx&lt;/pre&gt;

&lt;p&gt;If you are on a Mac you will need to use easy_install to install one thing, for IPython.  For some reason pip installing the readline library puts it too late in the load path to work with IPython, so you need to use easy_install-3.3 readline  to get the history in IPython working just right.&lt;/p&gt;

&lt;p&gt;Finally, you will want to add the Python 3 bin directory to your PATH.  Edit your .bashrc or .zshenv file.  Note that the following puts the Python 3 bin directory at the front of your PATH, making it the default when you type pip, python, or ipython.  If you need to revert back to python2.7 for some task you will need to be explicit about it.&lt;/p&gt;

&lt;pre&gt;export PATH=/Library/Frameworks/Python.framework/Versions/3.3/bin:$PATH&lt;/pre&gt;

&lt;p&gt;Easy!  You were expecting this to be a long and arduous process fraught with hacks and silly edits to config files.  Nope, just a few basic commands.  I take this as the final sign that Python 3 is here and ready to be your day to day Python.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>to infinity and beyond</title><link href="https://bnmnetp.github.io/PelicanBlog/we-passed-3-million-entries-in-our-log-data-for-interactivepython-org-which-got-.html" rel="alternate"></link><published>2013-02-17T00:00:00-06:00</published><updated>2013-02-17T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2013-02-17:/PelicanBlog/we-passed-3-million-entries-in-our-log-data-for-interactivepython-org-which-got-.html</id><summary type="html">&lt;p&gt;&lt;img src="/images/31.media.tumblr.com/9c55cab1486b5c7bb35cf993249f6b4c/tumblr_midzqpGQSy1r729pmo1_1280.png" /&gt;&lt;/p&gt;
&lt;p&gt;We passed 3 million entries in our log data for &lt;a href="http://interactivepython.org"&gt;InteractivePython.org&lt;/a&gt; which got me to wondering about how we are growing.  The site has been live for 275 days.  You can really see how the site took off after day 100, which makes sense because that was bout the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="/images/31.media.tumblr.com/9c55cab1486b5c7bb35cf993249f6b4c/tumblr_midzqpGQSy1r729pmo1_1280.png" /&gt;&lt;/p&gt;
&lt;p&gt;We passed 3 million entries in our log data for &lt;a href="http://interactivepython.org"&gt;InteractivePython.org&lt;/a&gt; which got me to wondering about how we are growing.  The site has been live for 275 days.  You can really see how the site took off after day 100, which makes sense because that was bout the time fall classes started around the country.  The tiny plateau between day 225 and 250 corresponds to Christmas/winter break for most schools, and now that Spring semester is in full swing it looks like the slope has gotten steeper again.&lt;/p&gt;

&lt;p&gt;The dotted line is the linear best fit line with a slope of 12,836.7.  Even if our log database is not growing exponentially thats an impressively steep slope.&lt;/p&gt;

&lt;p&gt;And just because this is all about Python and education, here's the Python code that created the graph.  I love matplotlib, it is such a powerful tool for quickly looking at your data.&lt;/p&gt;

&lt;pre&gt;
import matplotlib.pyplot as plt
from numpy import polyfit, arange

f = open('bydate','r')
days = f.readlines()
totals = [0]

for d in days:
    day,count = d.split('|')
    count = int(count)
    totals.append(totals[-1]+count)

x = arange(len(totals))
m,b = polyfit(x,totals,1)
print m
plt.plot(x,totals,x,m*x+b, '--k')
plt.ylim(ymin=0)
plt.show()
&lt;/pre&gt;

&lt;p&gt;The data file is simple. One day per line with the date in one column and the number of actions in the other column.  Here are the last few days:&lt;/p&gt;

&lt;pre&gt;
 2013-02-14 | 24349
 2013-02-15 | 17396
 2013-02-16 | 12645
&lt;/pre&gt;</content><category term="Python"></category><category term="python"></category><category term="interactivepython"></category><category term="runestoneinteractive"></category></entry><entry><title>everyday python - new blog</title><link href="https://bnmnetp.github.io/PelicanBlog/everyday-python-new-blog.html" rel="alternate"></link><published>2013-01-13T00:00:00-06:00</published><updated>2013-01-13T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2013-01-13:/PelicanBlog/everyday-python-new-blog.html</id><summary type="html">&lt;p&gt;I've decided that it will be best to keep my personal blog separate from the new Everyday Python blog project.  All of the infrastructure to make the posts interactive just work so much better when I have control of the server and everything else.  So  You can head over to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've decided that it will be best to keep my personal blog separate from the new Everyday Python blog project.  All of the infrastructure to make the posts interactive just work so much better when I have control of the server and everything else.  So  You can head over to &lt;a href="http://interactivepython.org/courselib/everyday"&gt;Everyday Python&lt;/a&gt; and click on the Everyday Python link there, or if you want to subscribe to the RSS feed for that project you can use &lt;a href="http://feeds.feedburner.com/everydaypython"&gt;this link&lt;/a&gt;.
&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>generating a password - part 1</title><link href="https://bnmnetp.github.io/PelicanBlog/generating-a-password-part-1.html" rel="alternate"></link><published>2013-01-03T00:00:00-06:00</published><updated>2013-01-03T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2013-01-03:/PelicanBlog/generating-a-password-part-1.html</id><content type="html">&lt;p&gt;OK, here is the first installment of the new Everyday Python series.  Today I'm just providing a link, as I still have some infrastructure work to get done in order to publish each installment both here and at Runestone Interactive.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://interactivepython.org/courselib/static/everyday/2013/01/2_password.html"&gt;Generating a password part 1&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>introducing everyday python</title><link href="https://bnmnetp.github.io/PelicanBlog/introducing-everyday-python.html" rel="alternate"></link><published>2013-01-02T00:00:00-06:00</published><updated>2013-01-02T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2013-01-02:/PelicanBlog/introducing-everyday-python.html</id><summary type="html">&lt;p&gt;&lt;div class="section" id="everyday-python"&gt;
&lt;h1&gt;Everyday Python&lt;a class="headerlink" href="#everyday-python" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It is always risky to make your New Years resolutions public, but this is one I&amp;#8217;ve
been thinking about for a while now, and so I&amp;#8217;m going to go ahead and impose a
measure of accountability on myself by proclaiming this publicly.  This week, I&amp;#8217;m …&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;div class="section" id="everyday-python"&gt;
&lt;h1&gt;Everyday Python&lt;a class="headerlink" href="#everyday-python" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It is always risky to make your New Years resolutions public, but this is one I&amp;#8217;ve
been thinking about for a while now, and so I&amp;#8217;m going to go ahead and impose a
measure of accountability on myself by proclaiming this publicly.  This week, I&amp;#8217;m
starting a series of educational blog posts here, and as a part of my &lt;a class="reference external" href="http://interactivepython.org"&gt;Runestone
Interactive&lt;/a&gt; publishing project.&lt;/p&gt;
&lt;p&gt;My idea is to publish a series of Python programming projects, aimed at solving
everyday problems, or puzzles. Hopefully these little projects will be interesting
and will give learners motivation to dig into the details of the solutions.  I
will provide links to the relevant Python programming constructs and data types in
either of the two interactive books (&lt;a class="reference external" href="http://interactivepython.org/courselib/static/thinkcspy/index.html"&gt;How to think like a computer scientist:
Interactive Edition&lt;/a&gt; , or
&lt;a class="reference external" href="http://interactivepython.org/courselib/static/pythonds/index.html"&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;) This will let me
focus on the problems, and not the minutia of the language.  Lets face it, reading
about all the different possible string methods is not that exciting, but seeing
them in action, and then wondering about what else you might be able to do with
strings is OK.&lt;/p&gt;
&lt;p&gt;The great thing about Python is that if you write things in a straightforward
manner its pretty easy to follow even if you don&amp;#8217;t know all the details.  So, that
is my intention.  Write a solution and do it in straightforward Python that
beginners can understand.  Each project will appear over several days, and
will likely include some homework related to the project.  I&amp;#8217;ll provide the solution
in a followup post.  In addition, I may refine the solution over the course of
several days introducing more and interesting solutions or more advanced features
of the Python language.&lt;/p&gt;
&lt;p&gt;In the back of my mind I am drawing inspiration from the old &lt;em&gt;Communications of the ACM&lt;/em&gt; column by John
Bently called &lt;em&gt;Programming Pearls&lt;/em&gt; In John&amp;#8217;s columns he would feature a particular
problem or algorithm, and present it in a straight forward way, but then he would
refine that solution again and again polishing it until he had an incredibly
elegant solution.  It was beautiful because even a novice programmer could
understand what was going on at the start of the article, but would get sucked in
to the beautiful solution and would learn more than they thought possible.  While
advanced programmers might chuckle at the initial solutions, even they would have
to admit that they learned something by the end of each column.&lt;/p&gt;
&lt;p&gt;I already have a few ideas in mind for the first few projects.  I&amp;#8217;m going to try
to start fairly easy with some string and list kind of projects, and work my way up
to more complex problems and algorithms, again this is meant to be educational so
that in theory a beginner might read through these posts more or less
chronologically, and learn some computer science along the way.&lt;/p&gt;
&lt;p&gt;Click the title to leave a comment.&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>how to think like a computer scientist interactive edition</title><link href="https://bnmnetp.github.io/PelicanBlog/how-to-think-like-a-computer-scientist-interactive-edition.html" rel="alternate"></link><published>2012-07-25T00:00:00-05:00</published><updated>2012-07-25T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2012-07-25:/PelicanBlog/how-to-think-like-a-computer-scientist-interactive-edition.html</id><summary type="html">&lt;p&gt;After hosting the interactive edition of How to Think like a Computer Scientist on the Google app engine at thinkcspy.appspot.com for over a year, we finally made the switchover to a new domain.  As of today all requests to thinkcspy will be automatically redirected to &lt;a href="http://interactivepython.org"&gt;http://interactivepython.org …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;After hosting the interactive edition of How to Think like a Computer Scientist on the Google app engine at thinkcspy.appspot.com for over a year, we finally made the switchover to a new domain.  As of today all requests to thinkcspy will be automatically redirected to &lt;a href="http://interactivepython.org"&gt;http://interactivepython.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This new domain, is hosted by Webfaction.com.  They have very reasonable hosting rates, along with plenty of bandwidth and disk space.   I have more control over the development platform that I use, I get to keep my data in a real relational database (postgresql) where I can write queries and export my data as much as I want, and finally, if I ever need to move from Webfaction, I own the domain and can move it with me, and I won't need to go through this name change again.&lt;/p&gt;

&lt;p&gt;For those of you who have used the thinkcspy site, you will notice a few upgrades to the content of the book have taken place.  In addition, we are now hosting another book along side thinkcspy.  So we now have coverage for both CS1 and CS2.&lt;/p&gt;

&lt;p&gt;CS1 -- &lt;a href="http://interactivepython.org/courselib/static/thinkcspy/index.html"&gt;http://interactivepython.org/courselib/static/thinkcspy/index.html&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;CS2 --&lt;a href="http://interactivepython.org/courselib/static/pythonds/index.html"&gt; http://interactivepython.org/courselib/static/pythonds/index.html&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;The CS2 book is based on our paperback book, Problem Solving with Algorithms and Data Structures using Python by Brad Miller and David Ranum.  Our forward thinking publisher has given us permission to convert the paper book into an interactive version and make it available online!&lt;/p&gt;

&lt;p&gt;The other great thing about the move to interactivepython.org is that you can now host your own course.  That is you can use one of our books online, but you are the instructor, so you can grade homework assignments, and look at activity reports for the students in your class.  So far we have 20 different institutions hosting one of the two books for a course currently,  or for the upcoming fall term.  The links to create your own course are right there on the home page, so if you are interested in using this site for a course go right ahead.&lt;/p&gt;

&lt;p&gt;The one downside to this move is that I did not migrate any of the data from the old thinkcspy site.  So if you have saved programs there you will need to recreate them at the new site.  I gave people plenty of notice about the move, so I'm hoping this won't turn into a big issue.  If it is, let me know, and I'll try to pull your code out of the google datastore for you.&lt;/p&gt;

&lt;p&gt;The second issue with the move is that I don't use google accounts  anymore.  If you want to save your programs you will need to create an account on the site.&lt;/p&gt;

&lt;p&gt;If you have a link to thinkcspy.appspot.com on any pages you control, please make the change to point to the new domain and location.  Thanks!&lt;/p&gt;

&lt;p&gt;If you are interested in contributing to the project, have a book you would like to host, or are just interested in how we are doing this, you can check out the code on github:  http://github.com/bnmnetp/runestone   If you don't want to go that far, but have assignments, or assessment questions you would like to contribute, please contact me!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="education"></category></entry><entry><title>runestone interactive</title><link href="https://bnmnetp.github.io/PelicanBlog/runestone-interactive.html" rel="alternate"></link><published>2012-06-06T00:00:00-05:00</published><updated>2012-06-06T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2012-06-06:/PelicanBlog/runestone-interactive.html</id><summary type="html">&lt;p&gt;What a week its been!   So much has happened in the last week that I just have to take some time out to organize my thoughts and get some of this information out there where others can read it.&lt;/p&gt;

&lt;p&gt;&amp;#13;
&lt;h3&gt;What is Runestone Interactive?&lt;/h3&gt;&amp;#13;
&lt;p&gt;Runestone Interactive is primarily a home for …&lt;/p&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;What a week its been!   So much has happened in the last week that I just have to take some time out to organize my thoughts and get some of this information out there where others can read it.&lt;/p&gt;

&lt;p&gt;&amp;#13;
&lt;h3&gt;What is Runestone Interactive?&lt;/h3&gt;&amp;#13;
&lt;p&gt;Runestone Interactive is primarily a home for both the content and the technologies that go into publishing interactive textbooks.  At the moment interactive textbooks for Computer Science, but who knows how far this could go.  Probably the best way to see this is to actually visit our site and play around.  But in the meantime here is a short video to give you an introduction.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;iframe frameborder="0" height="315" src="http://www.youtube.com/embed/Us4fpoNht68" width="560"&gt;&lt;/iframe&gt; &lt;/p&gt;&amp;#13;
&lt;ol&gt;&lt;li&gt;Home to our open source publishing tools.  My goal as that these tools become the LaTeX of interactive publishing. There is lots of work to do before we can claim success here, but I think we have a good vision and a decent start.&lt;/li&gt;&amp;#13;
&lt;li&gt;A model for a new online only publishing house. At some point, I think it is important for content to go through an editorial process, not just for copy editing quality, but for coherence, and quality of approach. Right now the number of content creators using our system is pretty small, but I can already see that starting to grow. We have lots of thinking to do about this.&lt;/li&gt;&amp;#13;
&lt;li&gt;A home for hosting online courses or textbooks.&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;h3&gt;Who is your audience?&lt;/h3&gt;&amp;#13;
&lt;p&gt;At the moment, I think we serve three distinct groups of people.&lt;/p&gt;&amp;#13;
&lt;ol&gt;&lt;li&gt;The  teacher out there who wants a good quality textbook, but is not interested in forcing their students to pay $100+ and is interesting in trying an interactive book, all for free.   So to serve this audience we have &lt;a href="http://interactivepython.org"&gt;interactvepython.org&lt;/a&gt;. You can select one of our pre-defined books and set up a course where you are the instructor and have access to grading etc. Or you can use the drag-and-drop interface to put together a book by selecting from the library of modules. Maybe some of these teachers have an exercise or two they would like to contribute, but mostly they are just looking for good materials to help them with their course.&lt;/li&gt;&amp;#13;
&lt;li&gt;Authors who would like to contribute significant chunks of content -- chapters or section sized -- or videos. For example I'm working with an entrepreneur who wants to add content and a graphics package that looks more like Nodebox. He's very interested in putting together materials for middle school kids.  Others, including other Computer Science researchers, are more interested in algorithm visualization and working together on building in more visualization tools to the tool box.  Others have their own CS course materials that they would like to get into an interactive form and make available to the world.&lt;/li&gt;&amp;#13;
&lt;li&gt;People who are interested in learning CS on their own.  We get a ton of people coming to the site just to learn on their own. I had the most heartfelt letter from a guy the other day who found our site as he is trying to retool after being laid off for a couple of years. He said this is the first thing he's come across that really worked for him and helped him learn a bit of CS.  How does this compare with Udacity and Coursera?  Both of those companies are primarily video oriented, and both of those companies are running courses that are in some sense synchronous.  You have to move through the course on their schedule to get the full benefit.  Our books/courses can be done at your own pace, on your own time.&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;div&gt; &lt;/div&gt;&amp;#13;
&lt;h3&gt;I would like to use this for my own class how do I get started?&lt;/h3&gt;&amp;#13;
&lt;p&gt;Its easy, just follow these steps:&lt;/p&gt;&amp;#13;
&lt;ol&gt;&lt;li&gt;Go to&lt;a href="http://interactivepython.org"&gt; interactivepython.org&lt;/a&gt; and register yourself as a user.&lt;/li&gt;&amp;#13;
&lt;li&gt;Click on Create a Custom Course link in the right sidebar.&lt;/li&gt;&amp;#13;
&lt;li&gt;Select a short name for your course that uniquely identifies it among all the other courses.&lt;/li&gt;&amp;#13;
&lt;li&gt;Type in a short description for your course&lt;/li&gt;&amp;#13;
&lt;li&gt;Now you get to choose.  Do you want to use one of our standard configurations, either How to Think Like a Computer Scientist: Interactive Edition, or Problem Solving with Algorithms and Data Structures using Python  or do you want to build a custom book by choosing modules from both of the above?&lt;/li&gt;&amp;#13;
&lt;li&gt;Click on the build button.  Wait a few minutes and you will have a page with a link to your new course.&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;div&gt;Now you can send your students to interactivepython.org and simply tell them to register for your course.  &lt;/div&gt;&amp;#13;
&lt;div&gt; &lt;/div&gt;&amp;#13;
&lt;div&gt;Why would you choose to build your own course when you could just use one of the open books?  When you create your own course you become the instructor and admin for that course.  You can grade your students assignments right online, and even access their homework in progress if they have questions.  You can also get a sense for the different activities they are choosing to use in the textbook.&lt;/div&gt;&amp;#13;
&lt;h3&gt;How can I get involved?&lt;/h3&gt;&amp;#13;
&lt;p&gt;There are lots of ways you can get involved:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;We need readers who are willing to be critical and report bugs on everything from typos to activecode blocks that don't work exactly right.&lt;/li&gt;&amp;#13;
&lt;li&gt;We need web developers who are willing to work on the back end, developing reports for instructors and making sure our infrastructure is sound.&lt;/li&gt;&amp;#13;
&lt;li&gt;We need web developers who are interested in developing user facing features, everything from algorithm visualizations to interactive assessment tools like the multiple choice and fill in the blank questions you see already.&lt;/li&gt;&amp;#13;
&lt;li&gt;We need compiler geeks who can help fix bugs in our Javascript implementation of Python.&lt;/li&gt;&amp;#13;
&lt;li&gt;We need authors who want to add new and interesting content, either entire courses, or new modules that could be combined with the modules already there.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="education"></category></entry><entry><title>hosting a web2py app in the cloud</title><link href="https://bnmnetp.github.io/PelicanBlog/hosting-a-web2py-app-in-the-cloud.html" rel="alternate"></link><published>2012-01-26T00:00:00-06:00</published><updated>2012-01-26T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2012-01-26:/PelicanBlog/hosting-a-web2py-app-in-the-cloud.html</id><summary type="html">&lt;p&gt;I consider myself pretty up to speed on web development.&lt;/p&gt;

&lt;p&gt;&amp;#13;
&lt;p&gt;I’ve spent the last two days trying to find a hosting solution for the data structures eBook…. I looked at too many of the following:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;Google App Engine — I’m a long time GAE user, but the setup I …&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I consider myself pretty up to speed on web development.&lt;/p&gt;

&lt;p&gt;&amp;#13;
&lt;p&gt;I’ve spent the last two days trying to find a hosting solution for the data structures eBook…. I looked at too many of the following:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;Google App Engine — I’m a long time GAE user, but the setup I have uses sphinx to generate content on the fly which it wants to store in pickle files on the local file system.  This doesn’t work with a GAE and some other systems that treat the file system as read only and expect any writing you do to go to a database.&lt;/li&gt;&amp;#13;
&lt;li&gt;heroku — seems very promising, but I’m not sure how to configure web2py so it doesn’t need any local file system write access.  The lack of ssh access is a bit disconcerting.&lt;/li&gt;&amp;#13;
&lt;li&gt;dotcloud — seems promising but the app kept hanging for no discernible reason.  I fought with it for the better part of the afternoon before deciding to move on.&lt;/li&gt;&amp;#13;
&lt;li&gt;fluxflex — easy to get web2py installed, (1 minute)  but a real pain to try to work with a real app.  I’m not going to use the web interface for all my editing.  I want to git push and/or git pull to deploy and update the app.  It doesn’t seem possible to get both ease of installation and robust configuration management.&lt;/li&gt;&amp;#13;
&lt;li&gt;pythonanywhere - non-starter&lt;/li&gt;&amp;#13;
&lt;li&gt;webfaction — Its not free, but at least it has a command line I can work with and I’ve got the whole thing running.  The only confusing thing about webfaction is that they don’t list web2py as a supported framework, but when you type it in under other it magically works for  you….  The other annoying thing that I &lt;em&gt;&lt;strong&gt;just&lt;/strong&gt;&lt;/em&gt; discovered is that the 256MB limit is way too low for the default configuration.  I just now got a helpful email saying a support ticket had been opened for me because I was using too much memory.  This was like 15 minutes after I finally got my app running and I’d made about 5 page requests.&lt;/li&gt;&amp;#13;
&lt;/ul&gt; &lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>adding a module to skulpt</title><link href="https://bnmnetp.github.io/PelicanBlog/adding-a-module-to-skulpt.html" rel="alternate"></link><published>2011-03-19T00:00:00-05:00</published><updated>2011-03-19T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2011-03-19:/PelicanBlog/adding-a-module-to-skulpt.html</id><summary type="html">&lt;p&gt;Now that I'm back from traveling in South America I've started on a project to add a turtle graphics module to skulpt. &amp;nbsp;Skulpt is a javascript implementation of Python written by Scott Graham, and is available on skulpt.googlecode.com. &amp;nbsp;Its a very nice project because it allows you to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now that I'm back from traveling in South America I've started on a project to add a turtle graphics module to skulpt. &amp;nbsp;Skulpt is a javascript implementation of Python written by Scott Graham, and is available on skulpt.googlecode.com. &amp;nbsp;Its a very nice project because it allows you to embed a Python interpreter right in your web page. &amp;nbsp;I've written about how to do this &lt;a href="http://blog.bonelakesoftware.com/2011/02/python-in-your-browser-in-javascript.html"&gt;in a previous post.&lt;/a&gt;&lt;br /&gt;The skulpt interpreter works like a charm, but it does not yet have any of the Python standard library modules implemented. &amp;nbsp;Scott has been working with wrapping some of Googles closure libraries, and has a webgl module too. &amp;nbsp;But none of your regular Python friends are available, things like math, random, turtle, etc need to be implemented. &amp;nbsp;For the most part these things are already available in javascript so the work is in creating the module and then wrapping the underlying Javascript inside the standard Python API.&lt;br /&gt;Where to start? &amp;nbsp;There's not a lot of documentation provided for skulpt, so I'm hoping this post will be enough to help others get going a bit quicker. &amp;nbsp;Scott was very helpful in responding to all my emails so this is not a criticism of him, rather I'm hoping this will save him the effort the next time someone wants to extend skulpt. &amp;nbsp;So, here's the deal. &amp;nbsp;skulpt relies on two javascript files the first is skulpt.js &amp;nbsp;and builtin.js &amp;nbsp;A very minimal installation only uses skulpt.js, whereas if you want to use any modules they are in builtin.js. &amp;nbsp;Looking around the distribution you will not immediately find skulpt.js because you need to build it. You get a sculpt.js file by using the m script that comes with the distribution. &amp;nbsp;running m --help will give you the full list of commands, but the two that you probably most care about are &lt;span style="text-decoration: underline;"&gt;m dist&lt;/span&gt; and &lt;span style="text-decoration: underline;"&gt;m docbi&lt;/span&gt; The dist command builds both skulpt.js and builtin.js &amp;nbsp;docbi builds builtin.js and puts a new copy of it in the doc/static directory.&lt;br /&gt;Lets begin with a quick tour of the source tree:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;src&lt;/strong&gt; - contains the implementation of the Python interpreter&lt;/li&gt;&lt;li&gt;&lt;strong&gt;src/lib&lt;/strong&gt; - has the module implementations of webgl and goog. &amp;nbsp;This is where turtle will live and any other modules I implement along the way.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;doc&lt;/strong&gt; - This directory contains a google app engine application and is what you see on &lt;a href="http://skulpt.org/"&gt;skulpt.org&lt;/a&gt; There are a couple of important files to check out in here. &amp;nbsp;One of them is doc/static/env/editor.js &amp;nbsp;This is the code that ties together the interactive editor on the home page with the skulpt interpreter and the &lt;a href="http://codemirror.net/"&gt;codemirror&lt;/a&gt; editor. &amp;nbsp;If you know how to build a google app engine app then this directory makes sense. &amp;nbsp;One thing about the home page is that it is not set up to use any of the modules. &amp;nbsp;The modules are used in the more advanced ide, which you can find in doc/ide/static. &amp;nbsp;I'm going to tell you how to add modules to the simpler editor later in this article.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;test&lt;/strong&gt; - this directory contains a bunch of files for testing the implementation in a batch mode. &amp;nbsp;These tests are run whenever you run m dist, or m test.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;dist&lt;/strong&gt; - This directory gets created and populated when you run the m dist command. &amp;nbsp;It contains the built and compressed versions of skulpt.js and builtin.js&lt;/li&gt;&lt;/ul&gt;To illustrate how to make use of modules, here's an extended version of my earlier hello world style example.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;script src="skulpt.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;script src="builtin.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&amp;lt;script type="text/javascript"&amp;gt;&lt;br /&gt;function outf(text) {&lt;br /&gt;   var mypre = document.getElementById("output");&lt;br /&gt;   mypre.innerHTML = mypre.innerHTML + text;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function builtinRead(x)&lt;br /&gt;{&lt;br /&gt;    if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)&lt;br /&gt;        throw "File not found: '" + x + "'";&lt;br /&gt;    return Sk.builtinFiles["files"][x];&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function runit() {&lt;br /&gt;   var prog = document.getElementById("yourcode").value;&lt;br /&gt;   var mypre = document.getElementById("output");&lt;br /&gt;   mypre.innerHTML = '';&lt;br /&gt;   Sk.configure({output:outf,&lt;br /&gt;           read: builtinRead&lt;br /&gt;              });&lt;br /&gt;   try {&lt;br /&gt;      Sk.importMainWithBody("&amp;lt;stdin&amp;gt;",false,prog);&lt;br /&gt;   } catch (e) {&lt;br /&gt;      alert(e);&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;h3&amp;gt;Try This&amp;lt;/h3&amp;gt;&lt;br /&gt;&amp;lt;form&amp;gt;&lt;br /&gt;&amp;lt;textarea edit_id="eta_5" id="yourcode"&amp;gt;&lt;br /&gt;print "Hello World"&lt;br /&gt;&amp;lt;/textarea&amp;gt;&lt;br /&gt;&amp;lt;button onclick="runit()" type="button"&amp;gt;Run&amp;lt;/button&amp;gt;&lt;br /&gt;&amp;lt;/form&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;pre id="output"&amp;gt;&amp;lt;/pre&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;div&gt;&lt;/div&gt;&lt;pre&gt;&lt;br /&gt;&lt;/pre&gt;There are some important differences between this version, and the version and the non-module version. &amp;nbsp;First off, the call to Sk.configure contains another key value pair which sets up a specialized read function. &amp;nbsp;This is the function that is responsible for returning your module out of the large array of files that are contained in the builtin.js file. &amp;nbsp;You will see that all of the modules are contained in this one file, stored in a big JSON structure. &amp;nbsp;The extra key value pair is:&lt;br /&gt;read: builtinRead&lt;br /&gt;The read function is just for loading modules and is called when you do an import statement of some kind. &amp;nbsp;In this case the function accesses the variable builtinFiles which is created from the builtin.js file. &amp;nbsp;The other difference, of course, is that you have to include builtin.js in your html file. &amp;nbsp;Note that builtin.js must be included after skulpt.js&lt;br /&gt;Now as far as the module itself goes, the easiest thing to do is to start your module in the src/lib directory. &amp;nbsp;This way it will automatically get built and included in builtin.js. &amp;nbsp;If you don't put it there then you are going to have to modify the m script, specifically the docbi function in the m script to include your module. &amp;nbsp;Suppose that you want to have a module called bnm.test &amp;nbsp;Here's what you have to do. &amp;nbsp;First, you need to make a bnm directory under lib. &amp;nbsp;In this directory you will need to have either &lt;strong&gt;init&lt;/strong&gt;.py or &lt;strong&gt;init&lt;/strong&gt;.js or bnm.js to stand in for the bnm module. &amp;nbsp;There doesn't need to be anything in the file as long as it exists. &amp;nbsp;This is just like CPython by the way. &amp;nbsp;Then to make a test module you can either make a test directory and put all your javascript code in &lt;strong&gt;init&lt;/strong&gt;.js or you can simply create a test.js file in the bnm directory. &amp;nbsp;Lets look at the test module.&lt;br /&gt;&lt;pre class="prettyprint"&gt;var $builtinmodule = function(name)&lt;br /&gt;{&lt;br /&gt;    var mod = {};&lt;br /&gt;    var myfact = function(n) {&lt;br /&gt; if(n &amp;lt; 1) {&lt;br /&gt;     return 1;&lt;br /&gt; } else {&lt;br /&gt;     return n * myfact(n-1);&lt;br /&gt; }&lt;br /&gt;    }&lt;br /&gt;    mod.fact = new Sk.builtin.func(function(a) {&lt;br /&gt; return myfact(a);&lt;br /&gt;    });&lt;/pre&gt;&lt;pre&gt;&lt;br /&gt;    mod.Stack = Sk.misceval.buildClass(mod, function($gbl, $loc) {&lt;br /&gt; $loc.&lt;strong&gt;init&lt;/strong&gt; = new Sk.builtin.func(function(self) {&lt;br /&gt;     self.stack = [];&lt;br /&gt; });&lt;br /&gt; &lt;br /&gt; $loc.push = new Sk.builtin.func(function(self,x) {&lt;br /&gt;     self.stack.push(x);&lt;br /&gt; });&lt;br /&gt; $loc.pop = new Sk.builtin.func(function(self) {&lt;br /&gt;     return self.stack.pop();&lt;br /&gt; });&lt;br /&gt;    },&lt;br /&gt;    'Stack', []);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    return mod;&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;All modules start out with the $var builtinmodule = statement.&lt;br /&gt;This test module exposes a single method to the outside world, called fact, There are a couple of key functions for building up a module. &amp;nbsp;The Sk.builtin.func &amp;nbsp; call for adding functions to your module, and the&amp;nbsp;Sk.misceval.buildClass method. &amp;nbsp;This test module defines a simple factorial function called fact, and a class called stack. &amp;nbsp;Here's a simple Python program that exercises the module:&lt;br /&gt;&lt;pre&gt;import bnm.test&lt;/pre&gt;&lt;pre&gt;print 'starting'&lt;/pre&gt;&lt;pre&gt;print bnm.test.fact(10)&lt;/pre&gt;&lt;pre&gt;x = bnm.test.Stack()&lt;/pre&gt;&lt;pre&gt;x.push(1)&lt;/pre&gt;&lt;pre&gt;x.push(2)&lt;/pre&gt;&lt;pre&gt;print x.pop()&lt;/pre&gt;&lt;pre&gt;print 'done'&lt;/pre&gt;&lt;br /&gt;Its not obvious, but the buildClass method takes four parameters: &amp;nbsp;globals, func, name, bases&lt;br /&gt;It seems that you always pass the mod object itself as the globals parameter, the func parameter is a function that represents the class object, the Name is the external name of the class, and bases presumably would be if the class is inheriting from another class.&lt;br /&gt;The Sk.builtin.func method creates a function. &amp;nbsp;For module creation we typically only have to worry about the one parameter, func, which is the javascript implementation of our Python function. &amp;nbsp;The method can also take a globals object and two closure objects. &amp;nbsp;Look at the comments in function.js if you want more explanation of how the builtin.func method works.&lt;br /&gt;Well, I think this should be enough to get you going. &amp;nbsp;Its worth repeating, if you made it this far, don't forget to call m docbi or m dist after you make changes in your module, its easy to get into the mode of thinking that the new javascript is automatically loaded. &amp;nbsp;But builtin.js is not automatically rebuilt!&lt;br /&gt;I'll consider this post a work in progress, please leave a comment if something is unclear or you would like something explained in more detail.&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-6096495771804140916?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>python in your browser... in javascript!</title><link href="https://bnmnetp.github.io/PelicanBlog/python-in-your-browser-in-javascript.html" rel="alternate"></link><published>2011-02-14T00:00:00-06:00</published><updated>2011-02-14T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2011-02-14:/PelicanBlog/python-in-your-browser-in-javascript.html</id><summary type="html">&lt;p&gt;I've recently been looking for ways to run Python in a browser.  There are lots of reasons why I think this is a cool idea.  For example, creating some simple tutorials, Making some online quizzes and tests, getting Python to run on my iPad...&lt;br /&gt;&lt;br /&gt;It looks like there are two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently been looking for ways to run Python in a browser.  There are lots of reasons why I think this is a cool idea.  For example, creating some simple tutorials, Making some online quizzes and tests, getting Python to run on my iPad...&lt;br /&gt;&lt;br /&gt;It looks like there are two projects that are actively working on solving this problem.  The first is called skulpt  (see the demo on &lt;a href="http://www.skulpt.org/"&gt;skulpt.org&lt;/a&gt;.)  This project actually reimplements the core of Python in Javascript by hand.  They are working on some modules, but right now it is basically the core Python language.&lt;br /&gt;&lt;br /&gt;The other project uses &lt;a href="http://code.google.com/p/emscripten/"&gt;Emscripten&lt;/a&gt; to compile the CPython C source code to javascript!  Yep you read that right.  You can see &lt;a href="http://syntensity.com/static/python.html"&gt;here&lt;/a&gt; that the core of Python 2.7 is running.  You can import sys, but thats about it.  Nevertheless both of these are really useful for beginning Python exercises.&lt;br /&gt;&lt;br /&gt;The problem with both of these is that right now there is no user level documentation.  Skulpt is particularly difficult as you can't even look at the demo page to see how its done.  You need to go digging through some additional source files from the distribution to figure out how to make it work for yourself.  The source code of the syntensity page is pretty easy to follow.  So here's a hello world program using skulpt.&lt;br /&gt;&lt;br /&gt;&lt;pre class="prettyprint" style="overflow: auto;"&gt;&amp;lt;script src="skulpt.js" type="text/javascript"&amp;gt;&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;script type="text/javascript"&amp;gt;&lt;br /&gt;function outf(text) {&lt;br /&gt;   var mypre = document.getElementById("output");&lt;br /&gt;   mypre.innerHTML = mypre.innerHTML + text;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function runit() {&lt;br /&gt;   var prog = document.getElementById("yourcode").value;&lt;br /&gt;   var mypre = document.getElementById("output");&lt;br /&gt;   mypre.innerHTML = '';&lt;br /&gt;   Sk.configure({output:outf});&lt;br /&gt;   try {&lt;br /&gt;      eval(Sk.importMainWithBody("&amp;lt;stdin&amp;gt;",false,prog));&lt;br /&gt;   } catch (e) {&lt;br /&gt;      alert(e);&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;h3&amp;gt;Try This&amp;lt;/h3&amp;gt;&lt;br /&gt;&amp;lt;form&amp;gt;&lt;br /&gt;&amp;lt;textarea edit_id="eta_5" id="yourcode"&amp;gt;&lt;br /&gt;print "Hello World"&lt;br /&gt;&amp;lt;/textarea&amp;gt;&lt;br /&gt;&amp;lt;button onclick="runit()" type="button"&amp;gt;Run&amp;lt;/button&amp;gt;&lt;br /&gt;&amp;lt;/form&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;pre id="output"&amp;gt;&amp;lt;/pre&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Its a bit on the verbose side, and it could certainly be improved so that less code would have to be replicated if you wanted to put multiple input/output areas on a single page, but as a learning example I think it works OK.  The try/catch block around the Sk.importMainWithBody function call will capture Python runtime errors and throw them.  This is a nice way to inform your users of syntax errors in any code they are trying out.&lt;br /&gt;&lt;br /&gt;I'm certainly no expert in either implementation, I just offer this post as an example and a time saver for anyone else trying to get going with either implementation.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-7271951656985409817?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>second edition of data structures book is out!</title><link href="https://bnmnetp.github.io/PelicanBlog/second-edition-of-data-structures-book-is-out.html" rel="alternate"></link><published>2011-01-28T00:00:00-06:00</published><updated>2011-01-28T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2011-01-28:/PelicanBlog/second-edition-of-data-structures-book-is-out.html</id><summary type="html">&lt;p&gt;Now that I'm back from my JTerm travels, I'm happy to let you know that the second edition of Problem Solving with Algorithms and Data Structures using Python is available. &amp;nbsp;(www.fbeedle.com)  David and I have worked hard on this new edition for about a year now, and we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now that I'm back from my JTerm travels, I'm happy to let you know that the second edition of Problem Solving with Algorithms and Data Structures using Python is available. &amp;nbsp;(www.fbeedle.com)  David and I have worked hard on this new edition for about a year now, and we are really excited about it.  We think it is a great step forward from the first edition, and I'm really looking forward to teaching out of it next year.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Here's whats new:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;All code is now written using Python 3.2&lt;/li&gt;&lt;li&gt;Chapter 1 now introduces Python sets, and exception processing.&lt;/li&gt;&lt;li&gt;Eliminated third party graphics package. &amp;nbsp;All graphics are done using the built-in turtle module&lt;/li&gt;&lt;li&gt;Focus on algorithm analysis in a newly written chapter 2. &amp;nbsp;In addition this chapter includes the analysis of Key Python data structures used throughout the book&lt;/li&gt;&lt;li&gt;New section on linked list implementation in Chapter 3&lt;/li&gt;&lt;li&gt;Moved Dynamic Programming to the end of chapter 4&lt;/li&gt;&lt;li&gt;Introduction of C style arrays and array management in Chapter 8&lt;/li&gt;&lt;li&gt;More focus on graphical recursive algorithms, including recursive tree drawing, and a recursive maze search program.&lt;/li&gt;&lt;li&gt;All source code for data structures has been organized into a single Python package to make it easy to incorporate into homework assignments.&lt;/li&gt;&lt;li&gt;Source for complete examples from each chapter are included so you do not need to piece together code from each listing&lt;/li&gt;&lt;li&gt;A new improved version of binary search trees in chapter 6.&lt;/li&gt;&lt;li&gt;New secion on balanced binary trees (AVL trees) added to chapter 6.&lt;/li&gt;&lt;/ul&gt;The main site for resources for this book is at http://www.pythonworks.org  &lt;br /&gt;&lt;p&gt;In the meantime, here's the cover for the second edition&lt;/p&gt;&lt;img src="http://lh6.ggpht.com/_wISL1SSAaEA/TUNP2iMUwpI/AAAAAAAAAL0/xohu9bItiOo/PythonDScover.jpg?imgmax=800" alt="PythonDScover.jpg" title="PythonDScover.jpg" border="0" width="400" /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-5068655818648164128?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>google app engine service login</title><link href="https://bnmnetp.github.io/PelicanBlog/google-app-engine-service-login.html" rel="alternate"></link><published>2010-08-16T00:00:00-05:00</published><updated>2010-08-16T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2010-08-16:/PelicanBlog/google-app-engine-service-login.html</id><summary type="html">&lt;p&gt;So I'm working on an app during my sabbatical that has an iPad component and an online Google App Engine component.  The Google App Engine part is half web based and half web service based.  Of course this means that the local client part has to be able to authenticate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I'm working on an app during my sabbatical that has an iPad component and an online Google App Engine component.  The Google App Engine part is half web based and half web service based.  Of course this means that the local client part has to be able to authenticate itself to the Google App Engine before it can communicate and do useful stuff.  Finding good reliable examples of how to do this is surprisingly hard.  For the Objective C code I'm working on I found a nice set of classes that do the trick for you here:  &lt;a href="http://github.com/cameronr/GoogleAppEngineAuth"&gt;On Github&lt;/a&gt;  For Python I found some example code on &lt;a href="http://stackoverflow.com/questions/101742/how-do-you-access-an-authenticated-google-app-engine-service-from-a-non-web-p"&gt;stackoverflow&lt;/a&gt;.  However it was not really in a reusable form.&lt;br /&gt;&lt;br /&gt;The basic outline of what you have to do is as follows:&lt;br /&gt;&lt;br /&gt;1.  Login to https://www.google.com/accounts/ClientLogin  This will give you an auth token.&lt;br /&gt;2.  Use the token you gained in step 1 to login to your Google App engine application or service.  When you have successfully logged in to your service google will set an ACSID cookie for you to use when you make subsequent requests to your service.  This prevents you from having to login each time you make a web service request.&lt;br /&gt;&lt;br /&gt;I've taken some ideas from both places mentioned above and have created a Python class for logging in and accessing app engine services from Python.  To use this module you just need to import it and create a GoogleAppEngineLogin object.  Once the object is created you can use the open method on the object to access further services.  The open method is just a convenience wrapper around urllib2.urlopen but it also makes sure that your cookie has not expired before it makes a request.  If you have comments or suggestions for how to improve the code please let me know via email or leave a comment.&lt;br /&gt;&lt;br /&gt;The code is reproduced below, but you can also just download the file from git clone git@gist.github.com:36b1c45ed39298178907.git&lt;br /&gt;&lt;pre class="prettyprint" style="overflow: auto;"&gt;&lt;br /&gt;import getpass&lt;br /&gt;import urllib&lt;br /&gt;import urllib2&lt;br /&gt;import cookielib&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class GoogleAppEngineLogin(object):&lt;br /&gt;    """&lt;br /&gt;   Logging in to an App Engine Account (when you use google users) is&lt;br /&gt;   a two step process: First you must login to Google generally.  This&lt;br /&gt;   gets you an auth token.  The auth token is used as part of a&lt;br /&gt;   request to login to your app/service During the login process for&lt;br /&gt;   your app/service the server sets a cookie with the name of ACSID,&lt;br /&gt;   it is this cookie and its value that serves as the authentication&lt;br /&gt;   token for your own service/app.  So, for future requests you need&lt;br /&gt;   to give the server the cookie as part of your request.  Handling&lt;br /&gt;   cookies can be a bit tricky if you haven't had some experience with&lt;br /&gt;   it but luckily Python's cookielib module makes it all pretty&lt;br /&gt;   automatic.&lt;br /&gt;&lt;br /&gt;    This class takes care of the whole login process for you, and then&lt;br /&gt;    gives you a simple helper to access the URLs for your service.&lt;br /&gt;    The helper function makes sure the cookie is still valid and&lt;br /&gt;    passes on the request along with the cookie.  Technically you&lt;br /&gt;    would not even need to use the helper function, you could use&lt;br /&gt;    urllib2 directly to access your service but this seems a bit&lt;br /&gt;    neater to me.&lt;br /&gt;&lt;br /&gt;    Some of this code was inspired by and lifted from an example on&lt;br /&gt;    stackoverflow.com, but that was all in-line code my contribution&lt;br /&gt;    is to add some error handling and encapsulate the whole thing&lt;br /&gt;    inside a class to make it easier to include in my/your own&lt;br /&gt;    programs.  Here's a link to the original thread on stackoverflow&lt;br /&gt;    http://stackoverflow.com/questions/101742/how-do-you-access-an-authenticated-google-app-engine-service-from-a-non-web-pyt&lt;br /&gt;&lt;br /&gt;    """&lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self, user_email, user_pw, uri, source):&lt;br /&gt;        """&lt;br /&gt;        Create a Google App Engine Object.&lt;br /&gt;        Arguments:&lt;br /&gt;        - &lt;code&gt;user_email&lt;/code&gt;:  your google username&lt;br /&gt;        - &lt;code&gt;user_pw&lt;/code&gt;: your google password&lt;br /&gt;        - &lt;code&gt;uri&lt;/code&gt;:  The url of your google app engine service&lt;br /&gt;        - &lt;code&gt;source&lt;/code&gt;: The unique name of your google app engine service&lt;br /&gt;        """&lt;br /&gt;        self._user_email = user_email&lt;br /&gt;        self._user_pw = user_pw&lt;br /&gt;        self._uri = uri&lt;br /&gt;        self._source = source&lt;br /&gt;        self._authtoken = None&lt;br /&gt;        self._auth_cookie = None&lt;br /&gt;        &lt;br /&gt;        if not self.google_client_login():&lt;br /&gt;            raise RuntimeError("Could not login to Google")&lt;br /&gt;        &lt;br /&gt;        if not self.app_engine_login():&lt;br /&gt;            raise RuntimeError("Could not login to your application")&lt;br /&gt;&lt;br /&gt;        &lt;br /&gt;    def google_client_login(self):&lt;br /&gt;        #&lt;br /&gt;        # get an AuthToken from Google accounts&lt;br /&gt;        #&lt;br /&gt;        auth_uri = 'https://www.google.com/accounts/ClientLogin'&lt;br /&gt;        authreq_data = urllib.urlencode({ "Email":   self._user_email,&lt;br /&gt;                                          "Passwd":  self._user_pw,&lt;br /&gt;                                          "service": "ah",&lt;br /&gt;                                          "source":  self._source,&lt;br /&gt;                                          "accountType": "HOSTED_OR_GOOGLE" })&lt;br /&gt;        auth_req = urllib2.Request(auth_uri, data=authreq_data)&lt;br /&gt;        try:&lt;br /&gt;            auth_resp = urllib2.urlopen(auth_req)&lt;br /&gt;            auth_resp_body = auth_resp.read()&lt;br /&gt;        except:&lt;br /&gt;            return False&lt;br /&gt;        # auth response includes several fields - we're interested in &lt;br /&gt;        #  the bit after Auth= &lt;br /&gt;        auth_resp_dict = dict(x.split("=")&lt;br /&gt;                              for x in auth_resp_body.split("\n") if x)&lt;br /&gt;        try:&lt;br /&gt;            self._authtoken = auth_resp_dict["Auth"]&lt;br /&gt;        except:&lt;br /&gt;            return False&lt;br /&gt;&lt;br /&gt;        return True&lt;br /&gt;&lt;br /&gt;    def app_engine_login(self):&lt;br /&gt;        #&lt;br /&gt;        #  Get a cookie&lt;br /&gt;        #  we use a cookie to authenticate with Google App Engine&lt;br /&gt;        #  by registering a cookie handler here, this will automatically store the &lt;br /&gt;        #  cookie returned when we use urllib2 to open&lt;br /&gt;        #  http://www.google.com/accounts/ClientLogin&lt;br /&gt;        self._cookiejar = cookielib.LWPCookieJar()&lt;br /&gt;        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self._cookiejar))&lt;br /&gt;        urllib2.install_opener(opener)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        serv_args = {}&lt;br /&gt;        serv_args['continue'] = self._uri&lt;br /&gt;        serv_args['auth']     = self._authtoken&lt;br /&gt;&lt;br /&gt;        full_serv_uri = "%s/_ah/login?%s" % (self._uri,urllib.urlencode(serv_args))&lt;br /&gt;&lt;br /&gt;        serv_req = urllib2.Request(full_serv_uri)&lt;br /&gt;        serv_resp = urllib2.urlopen(serv_req)&lt;br /&gt;        serv_resp_body = serv_resp.read()&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        for i, c in enumerate(self._cookiejar):&lt;br /&gt;            if c.name == 'ACSID':&lt;br /&gt;                self._auth_cookie = c&lt;br /&gt;                return True&lt;br /&gt;&lt;br /&gt;        return False&lt;br /&gt;&lt;br /&gt;    def open(self,url,data=None):&lt;br /&gt;        """&lt;br /&gt;        url should be a properly encoded url ready to go.  data is&lt;br /&gt;        optional and should be used to provide parameters to pass&lt;br /&gt;        along with the URL when you want to use POST instead of GET.&lt;br /&gt;        If you provide data it must be properly encoded just as if you&lt;br /&gt;        were calling urlopen directly yourself.&lt;br /&gt;        """&lt;br /&gt;        if self._auth_cookie.is_expired():&lt;br /&gt;            if not self.google_client_login() or not self.app_engine_login():&lt;br /&gt;                raise RuntimeError("Cannot get proper authorization for this request")&lt;br /&gt;            &lt;br /&gt;        serv_req = urllib2.Request(url,data)&lt;br /&gt;        return urllib2.urlopen(serv_req)&lt;br /&gt;        &lt;br /&gt;&lt;br /&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":&lt;br /&gt;    user = raw_input("User: ")&lt;br /&gt;    pw = getpass.getpass("Password: ")&lt;br /&gt;    service_url = "http://myapp.appspot.com"&lt;br /&gt;    service_name = "myapp"&lt;br /&gt;    gae = GoogleAppEngineLogin(user,pw,service_url,service_name)&lt;br /&gt;    h = gae.open("http://myapp.appspot.com/my/service")&lt;br /&gt;    print h.read()&lt;br /&gt;        &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-6097603738466978791?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>beautifulsoup, bonktown and growl</title><link href="https://bnmnetp.github.io/PelicanBlog/beautifulsoup-bonktown-and-growl.html" rel="alternate"></link><published>2009-07-23T00:00:00-05:00</published><updated>2009-07-23T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-07-23:/PelicanBlog/beautifulsoup-bonktown-and-growl.html</id><summary type="html">&lt;p&gt;Here's a little script that combines two of my favorite pass times.  Python programming and cycling.  bonktown.com is a great site that has steep discounts on road cycling gear.  They only sell one item at a time and they typically sell that item until it is gone.  I've gotten …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a little script that combines two of my favorite pass times.  Python programming and cycling.  bonktown.com is a great site that has steep discounts on road cycling gear.  They only sell one item at a time and they typically sell that item until it is gone.  I've gotten some great deals on clothing and other stuff on that site.  Bonktown helps you know whats currently for sale in a number of ways, including a nice dashboard widget that pops up a notifier when something new comes on sale.  The problem is that over time I've started to ignore the growl notifiers for bonktown, because I'm not interested in lots of the stuff they sell.&lt;br /&gt;&lt;br /&gt;So, I wrote this python script that allows me to look for the stuff I am interested in buying.  It works by having a file of regular expressions that I use to search the item descriptions when something goes on sale at bonktown. If the item matches something I'm looking for then I get a Growl notification.  If not then I don't hear about it.&lt;br /&gt;&lt;br /&gt;Here's the code:&lt;br /&gt;&lt;br /&gt;&lt;pre class="prettyprint" style="overflow:auto;"&gt;&lt;br /&gt;#!/usr/bin/env python2.6&lt;br /&gt;&lt;br /&gt;import re&lt;br /&gt;import urllib&lt;br /&gt;from BeautifulSoup import BeautifulSoup&lt;br /&gt;import Growl&lt;br /&gt;&lt;br /&gt;name = "MyBonk"   # was BonkMe&lt;br /&gt;notifications = ["search_hit"]&lt;br /&gt;notifier = Growl.GrowlNotifier(name,notifications)&lt;br /&gt;notifier.register()&lt;br /&gt;&lt;br /&gt;# Read file of search Terms&lt;br /&gt;myTerms = open("/Users/bmiller/lib/bonk_items.txt").readlines()&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;# Get the latest page&lt;br /&gt;bt = urllib.urlopen("http://www.bonktown.com")&lt;br /&gt;&lt;br /&gt;doc = BeautifulSoup(bt.read())&lt;br /&gt;&lt;br /&gt;itemlist = doc.findAll(id=re.compile("item_title"))&lt;br /&gt;price = doc.findAll(id=re.compile("price"))&lt;br /&gt;desc = doc.findAll(id=re.compile("item_description"))&lt;br /&gt;&lt;br /&gt;for term in myTerms:&lt;br /&gt;    for i in range(len(itemlist)):&lt;br /&gt;        if itemlist[i] and re.search(term[:-1],itemlist[i].contents[0],re.IGNORECASE):&lt;br /&gt;            notifier.notify("search_hit",&lt;br /&gt;                            itemlist[i].contents[0],&lt;br /&gt;                            desc[i].contents[7].contents[0],&lt;br /&gt;                            sticky=False)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;This script makes use of several modules:&lt;br /&gt;&lt;ul&gt;&lt;br /&gt;&lt;li&gt;Growl&lt;/li&gt;&lt;br /&gt;&lt;li&gt;BeautifulSoup&lt;/li&gt;&lt;br /&gt;&lt;li&gt;urllib&lt;/li&gt;&lt;br /&gt;&lt;li&gt;re&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;I would have liked to use one of the standard library html/xml parsers, but I could not find one that was as convenient or easy to use as BeautifulSoup.  If you can tell me how to parse messy html with one of the standard library xml modules please let me know.&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-1449130420935951350?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="biking"></category></entry><entry><title>mit uses python instead of scheme for intro cs</title><link href="https://bnmnetp.github.io/PelicanBlog/mit-uses-python-instead-of-scheme-for-intro-cs.html" rel="alternate"></link><published>2009-05-11T00:00:00-05:00</published><updated>2009-05-11T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-05-11:/PelicanBlog/mit-uses-python-instead-of-scheme-for-intro-cs.html</id><summary type="html">&lt;p&gt;I've seen several interesting blog posts related to MIT switching from Scheme to Python for their intro course.  This is really interesting to me since SICP is one of my favorite CS books of all time.  Nevertheless I'm glad to see leading institutions change to my favorite language.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://blog.snowtide.com/2009/03/24/why-mit-now-uses-python-instead-of-scheme-for-its-undergraduate-cs-program"&gt;Paraphrase of …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've seen several interesting blog posts related to MIT switching from Scheme to Python for their intro course.  This is really interesting to me since SICP is one of my favorite CS books of all time.  Nevertheless I'm glad to see leading institutions change to my favorite language.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://blog.snowtide.com/2009/03/24/why-mit-now-uses-python-instead-of-scheme-for-its-undergraduate-cs-program"&gt;Paraphrase of Gerald Sussman's remarks&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://danweinreb.org/blog/why-did-mit-switch-from-scheme-to-python"&gt;Dan Weinreb's blog&lt;/a&gt;&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-597509680042764876?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>vpython version 5</title><link href="https://bnmnetp.github.io/PelicanBlog/vpython-version-5.html" rel="alternate"></link><published>2009-04-18T00:00:00-05:00</published><updated>2009-04-18T00:00:00-05:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-04-18:/PelicanBlog/vpython-version-5.html</id><summary type="html">&lt;p&gt;The other day I discovered that the folks working on VPython have been very busy over the last couple of years.  I had given up on VPython because the Mac distribution was so difficult to use.  It required the X windows server and one point and lots of other extra …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I discovered that the folks working on VPython have been very busy over the last couple of years.  I had given up on VPython because the Mac distribution was so difficult to use.  It required the X windows server and one point and lots of other extra junk at other times.  But now things are easy!  There is a great installer package and it just works.&lt;br /&gt;&lt;br /&gt;For those of you who have not heard of VPython before it is a 3D graphics module called visual built on top of Python and OpenGL.  You can do a lot of nice 3D graphics very simply with VPython.  Its great for education in math and physics and introductory computer science.&lt;br /&gt;&lt;br /&gt;So as an experiment I built a turtle graphics module on top of VPython.  I use turtle graphics a lot in teaching but the TKinter turtles all suffer from some event loop problems when you use them with IDLE.  VPython does not suffer from this problem plus gives you a lot of other cool benefits.  One of the benefits is that the window resizes automatically for you based on the units you use in your application.  Want to draw a picture at the atomic level of detail?  No problem, want to draw planets circling each other?  Again no problem.&lt;br /&gt;&lt;br /&gt;Here's a screen capture of a fractal tree created in 3-D using my new turtle.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align:center;"&gt;&lt;img src="http://lh3.ggpht.com/_wISL1SSAaEA/SenOsybCWeI/AAAAAAAAADI/vUI7S1pADpQ/Picture%202.png?imgmax=800" alt="Picture 2.png" border="0" width="510" height="530" /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Here's the VPython turtle code:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;def tree(t,trunkLength):&lt;br /&gt;    if trunkLength &amp;lt; 5:&lt;br /&gt;        return&lt;br /&gt;    else:&lt;br /&gt;        turnDz = random.randint(20,40)&lt;br /&gt;        turnDx = random.randint(20,40)&lt;br /&gt;        trunkShort = random.randint(10,20)&lt;br /&gt;        t.width(trunkLength/10.0)&lt;br /&gt;        if trunkLength &amp;lt; 25:&lt;br /&gt;            t.color(color.green)&lt;br /&gt;        else:&lt;br /&gt;            t.color((174/255.0,145/255.0,0))&lt;br /&gt;        t.forward(trunkLength)&lt;br /&gt;        # right trunk&lt;br /&gt;        t.right(turnDz,ZAXIS)&lt;br /&gt;        tree(t,trunkLength-trunkShort)&lt;br /&gt;        # left trunk&lt;br /&gt;        t.left(2&lt;em&gt;turnDz,ZAXIS)&lt;br /&gt;        tree(t,trunkLength-trunkShort)&lt;br /&gt;        # front trunk&lt;br /&gt;        t.right(turnDz,ZAXIS)&lt;br /&gt;        t.right(turnDx,XAXIS)&lt;br /&gt;        tree(t,trunkLength-trunkShort)&lt;br /&gt;        # back trunk&lt;br /&gt;        t.left(2&lt;/em&gt;turnDx,XAXIS)&lt;br /&gt;        tree(t,trunkLength-trunkShort)&lt;br /&gt;        # restore&lt;br /&gt;        t.right(turnDx,XAXIS)&lt;br /&gt;        t.backward(trunkLength)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;If you want to check out the turtle module and play with it, you are welcome to do so:  hg clone http://bitbucket.org/bnmnetp/vturtle  Or send me mail.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-2070433995579609364?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>book plug</title><link href="https://bnmnetp.github.io/PelicanBlog/book-plug.html" rel="alternate"></link><published>2009-02-01T00:00:00-06:00</published><updated>2009-02-01T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-02-01:/PelicanBlog/book-plug.html</id><summary type="html">&lt;p&gt;Here’s a &lt;a href="http://www.amazon.com/gp/blog/post/PLNK21DEIR91CB333"&gt;little plug&lt;/a&gt; for our book from our Colleague &lt;a href="http://www.cc.gatech.edu/~guzdial/"&gt;Mark Guzdial&lt;/a&gt; at Georgia Tech.  This was written last September right after the book was published but I didn’t find out about it until this morning.  Thanks Mark!&lt;/p&gt;

&lt;p&gt;In addition, David and I have started a new blog …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here’s a &lt;a href="http://www.amazon.com/gp/blog/post/PLNK21DEIR91CB333"&gt;little plug&lt;/a&gt; for our book from our Colleague &lt;a href="http://www.cc.gatech.edu/~guzdial/"&gt;Mark Guzdial&lt;/a&gt; at Georgia Tech.  This was written last September right after the book was published but I didn’t find out about it until this morning.  Thanks Mark!&lt;/p&gt;

&lt;p&gt;In addition, David and I have started a new blog to post corrections and updates to &lt;em&gt;Python Programming in Context&lt;/em&gt;  &lt;a href="http://pycontext.blogspot.com/"&gt;Over here&lt;/a&gt; If you are already using the book please check it out.&lt;/p&gt;

&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-7817340241579693279?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>remember the milk</title><link href="https://bnmnetp.github.io/PelicanBlog/remember-the-milk.html" rel="alternate"></link><published>2009-01-30T00:00:00-06:00</published><updated>2009-01-30T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-01-30:/PelicanBlog/remember-the-milk.html</id><summary type="html">&lt;p&gt;In the past year, I've been a passionate supporter of three task management apps.  OmniFocus, Things, and Remember The Milk (RTM).  I've switched back and forth between them trying to decide which one works best for me.  I think I'm finally ready to commit to RTM as my long term …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the past year, I've been a passionate supporter of three task management apps.  OmniFocus, Things, and Remember The Milk (RTM).  I've switched back and forth between them trying to decide which one works best for me.  I think I'm finally ready to commit to RTM as my long term solution and here's why.&lt;/p&gt;

&lt;p&gt;All three apps have an iPhone component and a desktop component. Although the primary RTM interface on the desktop is through the browser there are plenty of Widgets and other desktop friendly ways to access RTM on the desktop.  What I really like about RTM for the desktop is its openness.  In terms of the ability to dump stuff into RTM its cloud computing model really works.&lt;/p&gt;

&lt;p&gt;With both OmniFocus and Things I have to be on the same subnet as my laptop in order for the wifi syncing between my Ipod Touch and the desktop to work.  Unfortunately outside of my house this is rarely the case.  With RTM I can be anywhere.  That means I'm free to roam anywhere in the world with my iPod Touch and I know that when I dump a task or note into RTM it will be there on my desktop or the web interface when I come back to it.  If I forget my iPod Touch (a very unlikely event) I can still dump tasks into RTM from any browser.&lt;/p&gt;

&lt;p&gt;The second thing I really like about RTM is its openness.  As you can see from my posts below I have developed my own desktop interface to RTM using the Python bindings and LaunchBar.  The three things that I want to do most often, with as little fuss as possible are: &lt;/p&gt;

&lt;ul&gt;&lt;br /&gt;&lt;li&gt;Add a task&lt;/li&gt;&lt;br /&gt;&lt;li&gt;Mark a task as complete&lt;/li&gt;&lt;br /&gt;&lt;li&gt;display tasks&lt;/li&gt;&lt;br /&gt;&lt;/ul&gt;

&lt;p&gt;With my LaunchBar integration I don't ever have to take my fingers off the keyboard to do any of those tasks.&lt;/p&gt;

&lt;p&gt;When I'm using my iPod Touch, I think that the RTM client is the best and most fully featured of the bunch.  Since RTM has been around as a service for longer than either Things or OmniFocus they have had more time to work on polishing their iApp.  It already supports tagging and searching.  Things that are coming in the other apps but are already here for RTM on the iPod today.&lt;/p&gt;

&lt;p&gt;Because RTM has an open API there are lots of other nice interfaces for you to use that make it easy to dump tasks and notes into your inbox.  Do you Twitter?  Send a direct message to your RTM inbox.  Do you Text?  Send using the Twitter RTM gateway you can text directly to your inbox.  Email? yes.  You can even email a whole list of stuff to RTM as a way to quickly import a long list of tasks or packing items you have copied from somewhere else. Jott, yes.  The possibilities are endless and expanding all the time.&lt;/p&gt;

&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-8362482726254033567?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;</content><category term="Python"></category><category term="applications"></category></entry><entry><title>python + growl + remember the milk = launchbar task management</title><link href="https://bnmnetp.github.io/PelicanBlog/python-growl-remember-the-milk-launchbar-task-management.html" rel="alternate"></link><published>2009-01-27T00:00:00-06:00</published><updated>2009-01-27T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-01-27:/PelicanBlog/python-growl-remember-the-milk-launchbar-task-management.html</id><summary type="html">&lt;h3&gt;Intro&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;Once I could add tasks to my RTM account through LaunchBar I wanted a way to quickly pull up a view of what tasks were due today through LaunchBar.  The Growl library provides a nice way of doing this.&lt;br /&gt;&lt;br /&gt;The overview is as follows:  Activate LaunchBar and type due …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Intro&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;Once I could add tasks to my RTM account through LaunchBar I wanted a way to quickly pull up a view of what tasks were due today through LaunchBar.  The Growl library provides a nice way of doing this.&lt;br /&gt;&lt;br /&gt;The overview is as follows:  Activate LaunchBar and type due.  This due is installed as a search shortcut and you can search for today, tomorrow, or all (abbreviations are also easy).  The search shortcut runs the python script that searches your tasks on Remember the Milk.  For each task it finds it puts up a sticky Growl notification so you get a nice list of tasks on your screen.  You could easily customize the script to put all the tasks in a single notification but I like them separate.&lt;br /&gt;&lt;br /&gt;Since the Growl module registers this script as an application you can also use the Growl Preference Pane to customize the look and feel or even the location of your notifications.  You can also customize whether you want the notifications to be sticky or not.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;The Code&lt;/h3&gt;&lt;br /&gt;Here is the code for doing all of this.  It makes use of the filter parameter on getList.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;#!/usr/bin/env python&lt;br /&gt;&lt;br /&gt;from rtm import *&lt;br /&gt;import sys&lt;br /&gt;import Growl&lt;br /&gt;&lt;br /&gt;def sendNotify(ts):&lt;br /&gt;    if type(ts.task) == list:&lt;br /&gt;        for j in range(len(ts.task)):&lt;br /&gt;            notifier.notify("today","Task Due: "+ts.task[j].due[:10],ts.name,sticky=True)&lt;br /&gt;    else:&lt;br /&gt;        notifier.notify("today","Task Due: "+ts.task.due[:10],ts.name,sticky=True)&lt;br /&gt;&lt;br /&gt;if len(sys.argv) == 2:&lt;br /&gt;    command = sys.argv[1]&lt;br /&gt;else:&lt;br /&gt;    command = "today"&lt;br /&gt;&lt;br /&gt;apiKey = "get your own"&lt;br /&gt;secret = "this too"&lt;br /&gt;token = "You will create this"&lt;br /&gt;&lt;br /&gt;name = "RTMDue"&lt;br /&gt;notifications = ["today","tomorrow"]&lt;br /&gt;notifier = Growl.GrowlNotifier(name,notifications)&lt;br /&gt;notifier.register()&lt;br /&gt;&lt;br /&gt;if command[:3] == "tod" or command == '':&lt;br /&gt;    cutoff = 'today'&lt;br /&gt;elif command[:3] == "tom":&lt;br /&gt;    cutoff = 'tomorrow'&lt;br /&gt;else:&lt;br /&gt;    cutoff = None &lt;br /&gt;&lt;br /&gt;rtm = createRTM(apiKey, secret, token)&lt;br /&gt;&lt;br /&gt;if cutoff:&lt;br /&gt;    filterString = 'status:incomplete and (due:%s or dueBefore:%s)'%(cutoff,cutoff)&lt;br /&gt;else:&lt;br /&gt;    filterString = 'status:incomplete'&lt;br /&gt;&lt;br /&gt;theTasks = rtm.tasks.getList(filter=filterString)&lt;br /&gt;&lt;br /&gt;if type(theTasks.tasks.list) == list:&lt;br /&gt;    for i in range(len(theTasks.tasks.list)):&lt;br /&gt;        if type(theTasks.tasks.list[i].taskseries) == list:&lt;br /&gt;            for j in range(len(theTasks.tasks.list[i].taskseries)):&lt;br /&gt;                ts = theTasks.tasks.list[i].taskseries[j]&lt;br /&gt;                sendNotify(ts)&lt;br /&gt;        else:&lt;br /&gt;            ts = theTasks.tasks.list[i].taskseries&lt;br /&gt;            sendNotify(ts)&lt;br /&gt;else:&lt;br /&gt;    if type(theTasks.tasks.list.taskseries) == list:&lt;br /&gt;        for i in range(len(theTasks.tasks.list.taskseries)):&lt;br /&gt;            ts = theTasks.tasks.list.taskseries[i]&lt;br /&gt;            sendNotify(ts)&lt;br /&gt;    else:&lt;br /&gt;        ts = theTasks.tasks.list.taskseries&lt;br /&gt;        sendNotify(ts)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Next Steps&lt;/h3&gt;&lt;br /&gt;It would be great if I can figure out a way to have the Growl notification box call a script to mark the task as done.  Feel free to leave comments or suggestions or improvements in the comments.&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-8714853411033992279?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry><entry><title>creating a group twitter repository</title><link href="https://bnmnetp.github.io/PelicanBlog/creating-a-group-twitter-repository.html" rel="alternate"></link><published>2009-01-10T00:00:00-06:00</published><updated>2009-01-10T00:00:00-06:00</updated><author><name>Brad Miller</name></author><id>tag:bnmnetp.github.io,2009-01-10:/PelicanBlog/creating-a-group-twitter-repository.html</id><summary type="html">&lt;p&gt;For the trip to Silicon Valley I wanted to have everyone be able to twitter about the experience using their own twitter account, but I also want to have a central place for everyone following the trip as a whole to see all of our tweets.  How to do that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the trip to Silicon Valley I wanted to have everyone be able to twitter about the experience using their own twitter account, but I also want to have a central place for everyone following the trip as a whole to see all of our tweets.  How to do that?  Python and the Twitter API to the rescue.  You can see the results of this by checking out @lutherlive on twitter&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;import twitter&lt;br /&gt;&lt;br /&gt;USER = "Your group account"&lt;br /&gt;PASS = "your group password"&lt;br /&gt;TAG = "tag contained in each message"&lt;br /&gt;&lt;br /&gt;api = twitter.Api(username=USER,password=PASS)&lt;br /&gt;&lt;br /&gt;# figure out when my last post was&lt;br /&gt;statuses = api.GetUserTimeline(user=USER)&lt;br /&gt;last_post = statuses[0].GetCreatedAt()&lt;br /&gt;&lt;br /&gt;# Get the timelines for all friends since my last_post&lt;br /&gt;tl = api.GetFriendsTimeline(user=USER,since=last_post)&lt;br /&gt;for post in tl:&lt;br /&gt;    # since my posts may show up in friends timelines avoid reposting loop&lt;br /&gt;    if post.user.screen_name != USER and TAG in post.text:&lt;br /&gt;        api.PostUpdate(post.user.screen_name + ": " + post.text)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;This little script logs in using the twitter account you create for the group.  Importantly, this account must follow all of the group members that you want to be able to re-tweet.  When one of the group members wants a tweet to show up on the group account they must use the TAG, in our case @lutherlive, somewhere in their post.&lt;br /&gt;&lt;br /&gt;After logging in, the script grabs the timeline for all of the members of the group.  This timeline is restricted to the posts since the last a post was made by the group user.  This is important to do otherwise you would end up with duplicate re-tweets every time the script is run.&lt;br /&gt;&lt;br /&gt;Next the script simply loops over all of the posts and checks for the tag.  If the tag is in the post the post is updated along with the screen name of the original group member that made the post.&lt;br /&gt;&lt;br /&gt;I put the script into a cron-job on the computer science server at Luther to run every 15 minutes, so while the @lutherlive user isn't a real time reflection of its group members tweets, its pretty darn close.&lt;br /&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2759017781463016019-6575147596563953147?l=blog.bonelakesoftware.com' alt='' /&gt;&lt;/div&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category></entry></feed>